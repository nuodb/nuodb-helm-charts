## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName

cloud:
  # supported: amazon, azure, google
  provider:
  # zones:
  #   - us-east-2a
  #   - us-east-2b
  #   - us-east-2c

  cluster:
    # cluster name is used to make resources unique in multi-cluster configurations.
    # If the NuoDB domain spans 2 or more physical clusters, then each cluster must have a unique cluster.name
    # and the entrypointName should be used to specify which name is used as the entrypoint.
    # The default is fine for single-cluster domains.
    name: cluster0
    entrypointName: cluster0

    # cluster domain is that specified during kubernetes deployment.  In multi-cluster configurations, it is
    # necessary to specify which cluster domain is used as the NuoDB Domain Entrypoint, and change it for the other clusters.
    # Defaults to cluster.local if omitted
    domain: cluster.local
    entrypointDomain: cluster.local

busybox:
  image:
    registry: docker.io
    repository: busybox
    tag: latest
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    ##
    # pullSecrets:
    #   - myRegistryKeySecretName
    ## Specify a imagePullPolicy
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##

nuodb:
  image:
    registry: docker.io
    repository: nuodb/nuodb-ce
    tag: 4.0.5
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    ##
    # pullSecrets:
    # - myRegistryKeySecretName
    ## Specify a imagePullPolicy
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##

  # the name of the ServiceAccount to use for all NuoDB Pods
  serviceAccount: nuodb

  # unless set to false, a Role and RoleBinding named "nuodb-kube-inspector"
  # that grants access to Pods, PersistentVolumeClaims, PersistentVolumes, and
  # StatefulSets is added to nuodb.serviceAccount
  addRoleBinding: true

admin:
  # nameOverride: east
  # fullnameOverride: admin-east

  # domain is the name of the NuoDB administration domain (e.g. the cluster name)
  domain: nuodb
  # namespace: nuodb

  # replicas
  # Number of admin service pods. Requires 1 server available for each
  # Admin Service
  replicas: 1

  lbPolicy: nearest
  lbQuery: random(first(label(pod ${pod:-}) label(node ${node:-}) label(zone ${zone:-}) any))

  ## Enable the Layer 4 Load balancer if required,
  ## and specify if it should provision an internal or external cloud IP address
  externalAccess: {}
  #   enabled: false
  #   internalIP: true

  persistence:
    size: 1Gi
    accessModes:
      - ReadWriteOnce
    # storageClass: "-"

  ## Enable persistent log volumes to retain logs when an external logging solution is not used.
  logPersistence:
    enabled: false
    overwriteBackoff:
      # Copies of the crash directory are taken to avoid overwrites of root crash.
      # This controls the window within which no more copies of the crash directory will be taken to avoid the disk filling.
      # Default will retain 3 copies within the last 120 minutes, after which copies will continue to be created.
      copies: 3
      windowMinutes: 120
    size: 60Gi
    accessModes:
      - ReadWriteOnce
    # storageClass: "-"

  ## Use a securityContext to specify additional capabilities
  # For example, if the container needs to configure network setting, then add "NET_ADMIN"
  # Ex: capabilities: [ "NET_ADMIN" ]
  ##
  securityContext:
    capabilities: []

  ## Specify one or more configMaps to import Environment Variables from
  # Ex:  configMapRef: [ myConfigMap, myOtherConfigMap ]
  envFrom:
    configMapRef: []

  ## Admin options
  # These are applied using the nuoadmin startup command
  # Add these values as appropriate for this domain
  options:
      # this high reconnect timeout is necessary because an admin can be
      # rescheduled on a different Node and a reconnecting engine will not
      # connect to it until the stale DNS entry in its local cache expires,
      # which has a default TTL of 30 seconds
      pendingReconnectTimeout: 60000
      # this is necessary because killed engine Pods may not generate a TCP_RST
      # packet to close the admin connection, leaving a database process entry
      # in the domain state that has no running Pod associated with it
      processLivenessCheckSec: 30

  ## nuodb-admin resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
    # limits:
    #   cpu: 10m
    #   memory: 16Mi
    # requests:
    #   cpu: 10m
    #   memory: 16Mi

  # Custom NuoDB configuration files path
  configFilesPath: /etc/nuodb/

  # NuoDB is a licensed product for Enterprise Edition.
  # Obtain your license from NuoDB support.
  #
  # You can provide the license via a configFile by using:
  #
  # - Helm CLI parameter
  # - Specify in this values.yaml file
  #
  # To specify from the CLI:
  #
  # --set admin.configFiles.nuodb\\.lic=<BASE64-TEXT-HERE>
  #
  configFiles: {}
    # nuodb.lic: |-
    #   "PUT YOUR BASE64 ENCODED LICENSE CONTENT HERE"

  # Recommended default admin affinity:
  # affinity: {}
  # nodeSelector: {}
  # tolerations: []

  # tlsCACert:
  #   secret: nuodb-ca-cert
  #   key: ca.cert
  # tlsKeyStore:
  #   secret: nuodb-keystore
  #   key: nuoadmin.p12
  #   password: changeIt
  # tlsTrustStore:
  #   secret: nuodb-truststore
  #   key: nuoadmin-truststore.p12
  #   password: changeIt
  # tlsClientPEM:
  #   secret: nuodb-client-pem
  #   key: nuocmd.pem

  serviceSuffix:
    clusterip: clusterip
    balancer: balancer
