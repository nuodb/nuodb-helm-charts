## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName

cloud:
  # supported: amazon, azure, google
  provider:
  # zones:
  #   - us-east-2a
  #   - us-east-2b
  #   - us-east-2c

  cluster:
    # cluster name is used to make resources unique in multi-cluster configurations.
    # If the NuoDB domain spans 2 or more physical clusters, then each cluster must have a unique cluster.name.
    # The default is fine for single-cluster domains.
    name: cluster0
    entrypointName: cluster0

busybox:
  image:
    registry: docker.io
    repository: busybox
    tag: latest
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    ##
    # pullSecrets:
    # - myRegistryKeySecretName
    ## Specify a imagePullPolicy
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##

nuodb:
  image:
    registry: docker.io
    repository: nuodb/nuodb-ce
    tag: 4.2.1
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    ##
    # pullSecrets:
    # - myRegistryKeySecretName
    ## Specify a imagePullPolicy
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##

  # the prefix for the shared request value - default value is always valid
  requestPrefix: ""

  # the prefix for the shared latest backup value - default value is always valid
  latestPrefix: ""

  # the prefix for the shared latest backup ringbuffer - default value is always valid
  latestKey: ""

  # the name of the ServiceAccount to use for all NuoDB Pods
  serviceAccount: nuodb

  # unless set to false, a Role and RoleBinding named "nuodb-kube-inspector"
  # that grants access to Pods, PersistentVolumeClaims, PersistentVolumes, and
  # StatefulSets is added to nuodb.serviceAccount
  addRoleBinding: true

admin:
  # domain is the name of the NuoDB administration domain (e.g. the cluster name)
  domain: nuodb
    
  # namespace: nuodb
  # tlsCACert:
  #   secret: nuodb-ca-cert
  #   key: ca.cert
  # tlsKeyStore:
  #   secret: nuodb-keystore
  #   key: nuoadmin.p12
  #   password: changeIt
  # tlsClientPEM:
  #   secret: nuodb-client-pem
  #   key: nuocmd.pem

  serviceSuffix:
    clusterip: "clusterip"
    balancer: "balancer"
    nodeport: "nodeport"

  ## Transparent Data Encryption (TDE) secrets
  # Storage passwords can be managed and stored as Kubernetes
  # secrets. TDE secrets for all databases should be created and 
  # provided before deploying NuoDB. For example:
  #   kubectl create secret generic demo-tde-secret -n nuodb \
  #     --from-literal target='topSecret'
  #
  # Note: TDE should be enabled on database layer using
  #   SQL> alter database change encryption type AES128;
  #
  # Storage password rotation is performed by updating the secret and 
  # providing the new target and historical (optional) passwords. 
  # The historical passwords are used for restoring old backup sets. 
  # For example:
  #   kubectl create secret generic demo-tde-secret -n nuodb \
  #     --from-literal target='superSecret' \
  #     --from-literal historical-20201110='topSecret' \
  #     --dry-run=client -o yaml | kubectl apply -f -
  tde:
    secrets: {}
      # demo: demo-tde-secret
    storagePasswordsDir: /etc/nuodb/tde


database:
  ## Provide a name in place of the chart name for `app:` labels
  ##
  #nameOverride: ""

  ## Provide a name to substitute for the full names of resources
  ##
  #fullnameOverride: ""

  # name
  # NuoDB Database name.  must consist of lowercase alphanumeric
  #characters '[a-z0-9]+'
  name: demo

  # rootUser
  # Name of Database user
  rootUser: dba

  # rootPassword
  # Database password
  rootPassword: secret

  initContainers:
    # Whether to run init-disk init container to change permissions of mounted
    # volumes. This should not be necessary if fsGroup is being specified in
    # the security context, unless the volumes have a storage class that does
    # not support fsGroup, such as hostpath.
    runInitDisk: true

    # Whether to run init-disk as root. If set to false, the user defined by
    # the Pod security context will be used if one is defined, otherwise the
    # default user for the init-disk container image (busybox) will be used.
    runInitDiskAsRoot: true

  securityContext:
    # Whether to create a security context for Pods containing only the fsGroup
    # value defined below. This is less restrictive than runAsNonRootGroup,
    # because it allows all containers in the Pod, including init and sidecar
    # containers to run using the default user (assuming that the containers
    # does not explicitly specify runAsUser and runAsGroup in their own
    # security contexts).
    fsGroupOnly: false

    # Whether to create a security context for Pods restricting the uid and gid
    # of the runtime "nuodb" user to 1000:1000, which is supported starting
    # with NuoDB image version 4.3.
    #
    # runAsNonRootGroup must be set to false with NuoDB image versions older
    # than 4.3.
    runAsNonRootGroup: false

    # Whether to create a security context for Pods containing the runAsUser
    # and fsGroup values defined below.
    enabled: false

    # runAsUser must be an integer between 1000 and 65533.
    runAsUser: 1000

    # Defining fsGroup in a security context causes volumes mounted into the
    # containers (including those defined by secrets and config maps) to be
    # owned by the specified group ID, which is also added as a supplementary
    # group to the runtime user. This allows a non-root user and group to read,
    # write, and execute files with permissions 440, 660, and 770.
    fsGroup: 1000

    # Specify additional container capabilities such as "NET_ADMIN"
    capabilities: []

  ## Import Environment Variables inside containers
  # List of EnvVar v1 core definitions
  # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#envvar-v1-core
  ##
  env: []

  ## Import Environment Variables from one or more configMaps
  # Ex: configMapRef: [ myConfigMap, myOtherConfigMap ]
  ##
  envFrom:
    configMapRef: []

  persistence:
    size: 20Gi
    accessModes:
      - ReadWriteOnce
    # storageClass: "-"

  ## database-wide options.
  # These are applied using the --database-options on the startup command
  # change these to values appropriate for this database
  # these options are applied to all processes in the database.
  options:
    ping-timeout: 60
    max-lost-archives: 0

  # Custom NuoDB configuration files path
  configFilesPath: /etc/nuodb/

  # Custom NuoDB configuration files used to override default NuoDB settings
  configFiles: {}
    # nuodb.config: |-
    #   verbose error,flush,warn

  # Load balancer configuration per database
  lbConfig:
    prefilter: ""
    default: ""

  # ensure all values here are strings - so quote any purely numeric values
  # source should be a tar.gz or an already local backupset.
  # type either stream or backupset
  autoImport:
    source: ""
    credentials: ""
    stripLevels: "1"
    type: ""

  # ensure all values here are strings - so quote any purely numeric values
  autoRestore:
    source: ""
    credentials: ""
    stripLevels: "1"
    type: ""

  # The names of the clusterIP and balancer services can be adjusted by customising the suffix
  # The default is to use the same as specified for the admin clusterIP and balancer load-balancers.
  serviceSuffix:
    clusterip: ""
    balancer: ""
    nodeport: ""

  # One primary and multiple secondary database Helm releases for the same
  # database name may be deployed into the same Kubernetes namespace. Set to
  # `false` to deploy secondary database Helm releases.
  primaryRelease: true

  sm:
    ## Enable persistent log volumes to retain logs when an external logging solution is not used.
    logPersistence:
      enabled: false
      overwriteBackoff:
        # Copies of the crash directory are taken to avoid overwrites of root crash.
        # This controls the window within which no more copies of the crash directory will be taken to avoid the disk filling.
        # Default will retain 3 copies within the last 120 minutes, after which copies will continue to be created.
        copies: 3
        windowMinutes: 120
      size: 60Gi
      accessModes:
        - ReadWriteOnce
      # storageClass: "-"

    # Settings for storage manager (SM) nodes with hotcopy enabled.
    # Total SM Limit is 1 in CE version of NuoDB
    # These SMs have hotcopy backup enabled. To start SMs without hotcopy use
    # database.sm.noHotCopy.replicas
    # All time values are in seconds unless the unit is included in the name.
    hotCopy:
      enablePod: true
      enableBackups: true
      replicas: 1

      # Deadline for starting a hotcopy job - if a job hasn't started in this time - give up
      deadline: 1800

      # timeout for completing a full or incremental hotcopy job - if a job
      # hasn't completed in this time - stop waiting for it; the default timeout
      # of "0" will force the backup jobs to wait forever for the requested
      # hotcopy operation to complete
      timeout: 0

      successHistory: 5
      failureHistory: 5

      backupDir: /var/opt/nuodb/backup

      # automatically generated backup groups will have this prefix - defaults
      # to cloud.cluster.name
      backupGroupPrefix: ""

      # hot-copy operation is requested separately per backup group; if not
      # configured, a backup group per HCSM is created automatically to ensure
      # that the configured backup redundancy is met; the automatically
      # generated backup group name of "<backupGroupPrefix>-<ordinal>" is used
      # where the ordinal matches the HCSM ordinal; if the database is split
      # across archives (storage groups are in use), each backup group should
      # have a minimum set of archives that together contain the entire contents
      # of the database
      backupGroups: {}
      #  cluster0-0:
      #    labels: "pod-name sm-database-nuodb-cluster0-demo-hotcopy-0"
      #    fullSchedule: "35 22 * * 6"
      #    incrementalSchedule: "35 22 * * 0-5"
      #    journalSchedule: "?/15 * * * *"


      ## Schedule for the running of the full backup cron job
      # Eg: At 22:35 on every day-of-month that is a Sunday
      fullSchedule: "35 22 * * 6"

      ## Schedule for the running the incremental backup cron job
      # Eg: At 22:35 on every day-of-month on every day-of-week from Monday through Saturday
      incrementalSchedule: "35 22 * * 0-5"

      restartPolicy: OnFailure

      persistence:
        size: 20Gi
        accessModes:
          - ReadWriteOnce
        # storageClass: "-"

      journalPath:
        enabled: false
        persistence:
          size: 20Gi
          accessModes:
            - ReadWriteOnce
          # storageClass: "-"

      coldStorage:
        credentials: ""

      ## settings for the journal backup
      journalBackup:
        enabled: false
        # schedule for the running the journal backup cron job; when journal
        # backup is enabled, an SM will retain each journal file on disk until
        # it is journal hot copied into a backup set; this means that journal
        # hot copy must be executed periodically to prevent SMs from running out
        # of disk space on the journal volume
        journalSchedule: "?/15 * * * *"
        deadline: 90
        # timeout for completing a journal hotcopy job - if a job hasn't
        # completed in this time - stop waiting for it; the default timeout of
        # "0" will force the backup jobs to wait forever for
        # the requested hotcopy operation to complete
        timeout: 0

    # Number of storage manager (SM) nodes that do not have hotcopy backup enabled.
    # SM Limit is 1 in CE version of NuoDB
    # These SMs do not have hotcopy enabled, to start SMs with hotcopy use
    # database.sm.HotCopy.replicas
    noHotCopy:
      enablePod: true
      replicas: 0

      journalPath:
        enabled: false
        persistence:
          size: 20Gi
          accessModes:
            - ReadWriteOnce
          # storageClass: "-"

    ## resources
    # k8s resource min (request) and max (limit)
    # min is also used for the target maximum memory used by the cache (NuoDB --mem option)
    resources:
      limits:
        cpu: 8
        memory: 16Gi
      requests:
        cpu: 4
        memory: 8Gi

    ## Affinity, selector, and tolerations
    # They are expanded as YAML, and can include variable and template references
    affinity: {}
    # nodeSelector: {}
    # tolerations: []
    
    ## labels
    # Additional Labels given to the SMs started
    labels: {}

    # additional options to pass to the starting NuoDB process.
    engineOptions: {}

    # named key/value pairs that need to be passed to the image, such as
    # keystore: "/etc/nuodb/keys/nuoadmin.p12"
    otherOptions: {}

    #Some clusters require longer readiness probe timeouts
    readinessTimeoutSeconds: 5

  te:
    ## Enable persistent log volumes to retain logs when an external logging solution is not used.
    logPersistence:
      enabled: false
      overwriteBackoff:
        # Copies of the crash directory are taken to avoid overwrites of root crash.
        # This controls the window within which no more copies of the crash directory will be taken to avoid the disk filling.
        # Default will retain 3 copies within the last 120 minutes, after which copies will continue to be created.
        copies: 3
        windowMinutes: 120
      size: 60Gi
      accessModes:
        - ReadWriteMany
      # storageClass: "-"

    ## Enable the Layer 4 Load balancer if required,
    ## and specify if it should provision an internal or external cloud IP address
    externalAccess: {}
      # enabled: false
      # internalIP: true
      # type: LoadBalancer
      # annotations: {}
    
    ## By default, database clusterip and headless services for direct TE connections are enabled,
    ## but can be optionally disabled here
    dbServices: {}
      # enabled: false

    # Number of transaction engines (TE) nodes.  Limit is 3 in CE version of NuoDB 
    replicas: 1

    ## resources
    # k8s resource min (request) and max (limit)
    # min is also used for the target maximum memory used by the cache (NuoDB --mem option)
    resources:
      limits:
        cpu: 4
        memory: 16Gi
      requests:
        cpu: 2
        memory: 8Gi

    ## Affinity, selector, and tolerations
    # There are expanded as YAML, and can include variable and template references
    affinity: {}
    # nodeSelector: {}
    # tolerations: []

    # labels
    # Additional Labels given to the TEs started
    labels: {}

    # additional options to pass to the starting NuoDB process.
    engineOptions: {}

    # named key/value pairs that need to be passed to the image, such as
    # keystore: "/etc/nuodb/keys/nuoadmin.p12"
    otherOptions: {}

    # Some clusters require longer readiness probe timeouts
    readinessTimeoutSeconds: 5
  
  # These annotations will pass through to the pod as supplied, useful for integrating 3rd party products such as Vault.
  podAnnotations: {}
    # vault.hashicorp.com/agent-inject: true

  # Set to true if you are using manually created volumes or restoring
  # from a previously existing backup.
  isManualVolumeProvisioning: false
  isRestore: false

  # A new version of NuoDB database software may also introduce a new version of
  # the database protocol. NuoDB supports explicit database protocol version
  # upgrade which is performed after upgrading the NuoDB image for all database
  # processes. To simplify NuoDB version rollout, Kubernetes Aware Admin (KAA)
  # is used to automatically upgrade database protocol and restart a Transaction
  # Engine (TE) as an upgrade finalization step. For more information on how to
  # perform the steps manually, please check Upgrading the Database Protocol
  # (https://doc.nuodb.com/nuodb/latest/deployment-models/physical-or-vmware-environments-with-nuodb-admin/installing-nuodb/upgrading-to-a-new-release/upgrading-the-database-protocol/).
  #
  # IMPORTANT: After the database protocol version has been upgraded, the NuoDB
  # Archive cannot be used with NuoDB software versions that only support the
  # previous database protocol version. As a result, downgrading after the
  # database protocol version has been changed will require restoring a backup
  # of the database.
  automaticProtocolUpgrade:
    # controls if an automatic protocol upgrade should be done for this database
    enabled: false
    # LBQuery expression to select the TE that will be restarted after
    # successful database protocol upgrade. Defaults to random TE. For more
    # information, please check LBQuery Expression Syntax
    # (https://doc.nuodb.com/nuodb/latest/client-development/load-balancer-policies/#_lbquery_expression_syntax).
    tePreferenceQuery: ""

nuocollector:
  # Enable NuoDB Collector by setting nuocollector.enabled=true
  enabled: false
  image:
    registry: docker.io
    repository: nuodb/nuodb-collector
    tag: 1.1.0
    pullPolicy: IfNotPresent
  watcher:
    registry: docker.io
    repository: kiwigrid/k8s-sidecar
    tag: 1.10.8
    pullPolicy: IfNotPresent
  plugins:
    ## NuoDB Collector compatible plugins specific for database services
    database: {}
