## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName

cloud:
  # supported: amazon, azure, google
  provider:
  # zones:
  #   - us-east-2a
  #   - us-east-2b
  #   - us-east-2c

  cluster:
    # cluster name is used to make resources unique in multi-cluster configurations.
    # If the NuoDB domain spans 2 or more physical clusters, then each cluster must have a unique cluster.name.
    # The default is fine for single-cluster domains.
    name: cluster0

busybox:
  image:
    registry: docker.io
    repository: busybox
    tag: latest
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    ##
    # pullSecrets:
    # - myRegistryKeySecretName
    ## Specify a imagePullPolicy
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##

nuodb:
  image:
    registry: docker.io
    repository: nuodb/nuodb-ce
    tag: 4.0.5
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    ##
    # pullSecrets:
    # - myRegistryKeySecretName
    ## Specify a imagePullPolicy
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##

  # the prefix for the shared request value - default value is always valid
  requestPrefix: ""

  # the prefix for the shared latest backup value - default value is always valid
  latestPrefix: ""

  # the prefix for the shared latest backup ringbuffer - default value is always valid
  latestKey: ""

  # the name of the ServiceAccount to use for all NuoDB Pods
  serviceAccount: nuodb

  # unless set to false, a Role and RoleBinding named "nuodb-kube-inspector"
  # that grants access to Pods, PersistentVolumeClaims, PersistentVolumes, and
  # StatefulSets is added to nuodb.serviceAccount
  addRoleBinding: true

admin:
  # domain is the name of the NuoDB administration domain (e.g. the cluster name)
  domain: nuodb
    
  # namespace: nuodb
  # tlsCACert:
  #   secret: nuodb-ca-cert
  #   key: ca.cert
  # tlsKeyStore:
  #   secret: nuodb-keystore
  #   key: nuoadmin.p12
  #   password: changeIt
  # tlsClientPEM:
  #   secret: nuodb-client-pem
  #   key: nuocmd.pem

  serviceSuffix:
    clusterip: "clusterip"
    balancer: "balancer"

database:
  ## Provide a name in place of prometheus-operator for `app:` labels
  ##
  #nameOverride: ""

  ## Provide a name to substitute for the full names of resources
  ##
  #fullnameOverride: ""

  # name
  # NuoDB Database name.  must consist of lowercase alphanumeric
  #characters '[a-z0-9]+'
  name: demo

  # rootUser
  # Name of Database user
  rootUser: dba

  # rootPassword
  # Database password
  rootPassword: secret

  # Typically set to runAsUser and/or fsGroup to 0 or 1000.
  # Add container capabilities such as NET_ADMIN. Ex: capabilities: [ "NET_ADMIN" ]
  securityContext:
    capabilities: []
    enabled: false
    runAsUser: 1000
    fsGroup: 0

  ## Import Environment Variables inside containers
  # List of EnvVar v1 core definitions
  # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#envvar-v1-core
  ##
  env: []

  ## Import Environment Variables from one or more configMaps
  # Ex: configMapRef: [ myConfigMap, myOtherConfigMap ]
  ##
  envFrom:
    configMapRef: []

  persistence:
    size: 20Gi
    accessModes:
      - ReadWriteOnce
    # storageClass: "-"

  ## database-wide options.
  # These are applied using the --database-options on the startup command
  # change these to values appropriate for this database
  # these options are applied to all processes in the database.
  options:
    ping-timeout: 60
    max-lost-archives: 0

  # Custom NuoDB configuration files path
  configFilesPath: /etc/nuodb/

  # Custom NuoDB configuration files used to override default NuoDB settings
  configFiles: {}
    # nuodb.config: |-
    #   verbose error,flush,warn

  # ensure all values here are strings - so quote any purely numeric values
  # source should be a tar.gz or an already local backupset.
  # type either stream or backupset
  autoImport:
    source: ""
    credentials: ""
    stripLevels: "1"
    type: ""

  # ensure all values here are strings - so quote any purely numeric values
  autoRestore:
    source: ""
    credentials: ""
    stripLevels: "1"
    type: ""

  # The names of the clusterIP and balancer services can be adjusted by customising the suffix
  # The default is to use the same as specified for the admin clusterIP and balancer load-balancers.
  serviceSuffix:
    clusterip: ""
    balancer: ""

  sm:
    ## Enable persistent log volumes to retain logs when an external logging solution is not used.
    logPersistence:
      enabled: false
      overwriteBackoff:
        # Copies of the crash directory are taken to avoid overwrites of root crash.
        # This controls the window within which no more copies of the crash directory will be taken to avoid the disk filling.
        # Default will retain 3 copies within the last 120 minutes, after which copies will continue to be created.
        copies: 3
        windowMinutes: 120
      size: 60Gi
      accessModes:
        - ReadWriteOnce
      # storageClass: "-"

    # Settings for storage manager (SM) nodes with hotcopy enabled.
    # Total SM Limit is 1 in CE version of NuoDB
    # These SMs have hotcopy backup enabled. To start SMs without hotcopy use
    # database.sm.noHotCopy.replicas
    # All time values are in seconds unless the unit is included in the name.
    hotCopy:
      enablePod: true
      enableBackups: true
      replicas: 1

      # Deadline for starting a hotcopy job - if a job hasn't started in this time - give up
      deadline: 1800

      # timeout for completing a hotcopy job - if a job hasn't completed in this time - stop waiting for it
      timeout: 1800

      successHistory: 5
      failureHistory: 5

      backupDir: /var/opt/nuodb/backup

      # group for selecting the SM(s) to backup - the default is the cloud.cluster.name
      backupGroup: ""

      ## Schedule for the running of the full backup cron job
      # Eg: At 22:35 on every day-of-month that is a Sunday
      fullSchedule: "35 22 * * 6"

      ## Schedule for the running the incremental backup cron job
      # Eg: At 22:35 on every day-of-month on every day-of-week from Monday through Saturday
      incrementalSchedule: "35 22 * * 0-5"

      persistence:
        size: 20Gi
        accessModes:
          - ReadWriteOnce
        # storageClass: "-"
        
      coldStorage:
        credentials: ""

      ## settings for the journal backup
      journalBackup:
        enabled: false
        intervalMinutes: 15
        deadline: 90
        timeout: 950

    # Number of storage manager (SM) nodes that do not have hotcopy backup enabled.
    # SM Limit is 1 in CE version of NuoDB
    # These SMs do not have hotcopy enabled, to start SMs with hotcopy use
    # database.sm.HotCopy.replicas
    noHotCopy:
      enablePod: true
      replicas: 0

    ## resources
    # k8s resource min (request) and max (limit)
    # min is also used for the target maximum memory used by the cache (NuoDB --mem option)
    resources:
      limits:
        cpu: 8
        memory: 16Gi
      requests:
        cpu: 4
        memory: 8Gi

    ## Affinity, selector, and tolerations
    # They are expanded as YAML, and can include variable and template references
    affinity: {}
    # nodeSelector: {}
    # tolerations: []
    
    ## labels
    # Additional Labels given to the SMs started
    labels: {}

    # additional options to pass to the starting NuoDB process.
    engineOptions: {}

    # named key/value pairs that need to be passed to the image, such as
    # keystore: "/etc/nuodb/keys/nuoadmin.p12"
    otherOptions: {}

    # Additional Options for DaemonSets
    # affinityNoHotCopyDS: {}
    # affinityHotCopyDS: {}
    # nodeSelectorNoHotCopyDS: {}
    # nodeSelectorHotCopyDS: {}
    # tolerationsDS: []

    #Some clusters require longer readiness probe timeouts
    readinessTimeoutSeconds: 5

  te:
    ## Enable persistent log volumes to retain logs when an external logging solution is not used.
    logPersistence:
      enabled: false
      overwriteBackoff:
        # Copies of the crash directory are taken to avoid overwrites of root crash.
        # This controls the window within which no more copies of the crash directory will be taken to avoid the disk filling.
        # Default will retain 3 copies within the last 120 minutes, after which copies will continue to be created.
        copies: 3
        windowMinutes: 120
      size: 60Gi
      accessModes:
        - ReadWriteMany
      # storageClass: "-"

    ## Enable the Layer 4 Load balancer if required,
    ## and specify if it should provision an internal or external cloud IP address
    externalAccess: {}
      # enabled: false
      # internalIP: true
    
    ## By default, database clusterip and headless services for direct TE connections are enabled,
    ## but can be optionally disabled here
    dbServices: {}
      # enabled: false

    # Number of transaction engines (TE) nodes.  Limit is 3 in CE version of NuoDB 
    replicas: 1

    ## resources
    # k8s resource min (request) and max (limit)
    # min is also used for the target maximum memory used by the cache (NuoDB --mem option)
    resources:
      limits:
        cpu: 4
        memory: 16Gi
      requests:
        cpu: 2
        memory: 8Gi

    ## Affinity, selector, and tolerations
    # There are expanded as YAML, and can include variable and template references
    affinity: {}
    # nodeSelector: {}
    # tolerations: []

    # labels
    # Additional Labels given to the TEs started
    labels: {}

    # additional options to pass to the starting NuoDB process.
    engineOptions: {}

    # named key/value pairs that need to be passed to the image, such as
    # keystore: "/etc/nuodb/keys/nuoadmin.p12"
    otherOptions: {}

    #Some clusters require longer readiness probe timeouts
    readinessTimeoutSeconds: 5
  
  enableDaemonSet: false
  # Set to true if you are using manually created volumes or restoring
  # from a previously existing backup.
  isManualVolumeProvisioning: false
  isRestore: false

openshift:
  # change this to true if you want to deploy using OpenShift proprietary features
  enabled: false
