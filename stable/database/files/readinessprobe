#!/bin/sh

# (C) Copyright NuoDB, Inc. 2019-2021  All Rights Reserved
# This file is licensed under the BSD 3-Clause License.
# See https://github.com/nuodb/nuodb-helm-charts/blob/master/LICENSE

die() {
    retval="$1"
    shift
    echo "$@"
    exit "$retval"
}

parse_fields() {
    # get start ID and node state from argument list
    unset start_id
    unset state
    for i in "$@"; do
        case $i in
            (sid:*)
                start_id="${i#*:}"
                shift
                ;;
            (state:*)
                state="${i#*:}"
                shift
                ;;
            (*)
                shift
                ;;
        esac
    done
}

run_sql() {
    local user="$1"; shift
    local password="$1"; shift
    echo "$*" | nuosql "$DB_NAME@$PEER_ADDRESS" \
        --user "$user" --password "$password" \
        --connection-property PreferInternalAddress=true
}

update_dba() {
    # execute DBA credentials update on ordinal 0 if the load-credentials script exists
    [ "${POD_NAME##*-}" = 0 ] || return 0
    [ -x "$LOAD_CREDENTIALS" ] || return 0

    # source load-credentials script and check expected variables
    . "$LOAD_CREDENTIALS"
    [ -n "$SOURCE_USER" -a -n "$SOURCE_PASSWORD" ] || return 0

    # environment variables were set, so DBA credentials update is required;
    # determine SQL statements to execute based on source and target DBA
    # user names
    local update_dba_sql="ALTER USER $DB_USER PASSWORD '$DB_PASSWORD';"
    [ "$DB_USER" = "$SOURCE_USER" ] || update_dba_sql="$(cat <<EOF
CREATE USER $DB_USER PASSWORD '$DB_PASSWORD';
GRANT SYSTEM.ADMINISTRATOR TO $DB_USER WITH GRANT OPTION;
GRANT SYSTEM.DBA TO $DB_USER WITH GRANT OPTION;
DROP USER $SOURCE_USER;
EOF
)"

    # update DBA credentials
    run_sql "$SOURCE_USER" "$SOURCE_PASSWORD" "$update_dba_sql"

    # check that DBA credentials have been updated
    run_sql "$DB_USER" "$DB_PASSWORD" || die 1 "DBA credentials for imported database not updated"
    echo "Updated DBA credentials for imported database"
    if [ -n "$SOURCE_CREDENTIALS_FILE" ]; then
        rm "$SOURCE_CREDENTIALS_FILE"
    fi
}

# iterate over all local nuodb processes; in a Docker container we would only
# expect one process, but make sure this also works if multiple nuodb processes
# are in the same pidspace
pgrep -xa nuodb | (
    n=0
    while read pid argv; do
        # skip zombie processes
        if [ "$(ps -o stat= -p "$pid")" = Z ]; then
            echo "Skipping zombie process with pid=$pid: $argv"
            continue
        fi

        # parse start ID and state from argument list; starting with 4.1, argv
        # is re-written to contain information about the engine process
        parse_fields $argv
        if [ "$start_id" != "" ]; then
            [ "$state" = Running ] || die 1 "Process with start ID $start_id not in Running state: $state"
        else
            # argv does not contain process info; use 'nuocmd show domain' to
            # obtain start ID and 'nuocmd check process' to check process
            # health; if multiple start IDs are returned, check the largest
            # one, which has to be the current one; this does not scale well as
            # the number of processes becomes very large, but we have no choice
            start_id="$(nuocmd show domain --process-format "==={hostname}:{pid} {start_id}" | sed -n "s/ *===$(hostname):$pid //p" | sort -n | tail -n1)"
            [ "$start_id" != "" ] && nuocmd check process --check-running --start-id "$start_id" \
                || die 1 "Process reported not ready"
        fi

        # increment process count
        n="$((n + 1))"
    done

    # make sure we found at least one local process
    [ "$n" != 0 ] || die 1 "No process found"
) || exit $?

# update DBA credentials if necessary
update_dba
