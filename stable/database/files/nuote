#!/bin/bash

# (C) Copyright NuoDB, Inc. 2019-2021  All Rights Reserved
# This file is licensed under the BSD 3-Clause License.
# See https://github.com/nuodb/nuodb-helm-charts/blob/master/LICENSE

. ${NUODB_HOME}/etc/nuodb_setup.sh

get_pod() {
    local KUBEDIR=/var/run/secrets/kubernetes.io/serviceaccount
    curl -s -H "Authorization: Bearer $(cat "$KUBEDIR/token")" --cacert "$KUBEDIR/ca.crt" "https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT/api/v1/namespaces/$(cat "$KUBEDIR/namespace")/pods/$POD_NAME" --connect-timeout 5
}

# poll pod status until container shows as started and container and image IDs
# are available, which are required for automatic database protocol upgrade to
# work correctly; do five retries before giving up
for i in {1..5}; do
    if ! get_pod | grep -q '"started": false' 2>/dev/null; then
        break
    fi
    sleep 1
done

# attempt to retain the previous crash directory (within the configured window to avoid filling the disk)
crashcount=$(find $NUODB_CRASHDIR/core* -maxdepth 0 ! -type d 2>/dev/null | wc -l)
if [ $crashcount -ge 1 ]; then
  retainedcrashcount=$(find $NUODB_LOGDIR/crash-* -maxdepth 0 -type d -cmin -$OVERWRITE_WINDOW 2>/dev/null | wc -l)
  if [ $retainedcrashcount -lt $OVERWRITE_COPIES ]; then
    crashbackupdir="$NUODB_LOGDIR/crash-$( date +%Y%m%dT%H%M%S )/"
    mkdir $crashbackupdir
    mv $NUODB_CRASHDIR/core* $crashbackupdir
  fi
fi

nuodocker_flags=()
[ -n "$NUODB_DEBUG" ] && nuodocker_flags+=("--debug")

# expects NUOCMD_API_SERVER to be set.
if [ -n "${NUODB_OPTIONS}" ] ; then
    exec nuodocker "${nuodocker_flags[@]}" start te --db-name "${DB_NAME}" --options "${NUODB_OPTIONS}" "$@"
else
    exec nuodocker "${nuodocker_flags[@]}" start te --db-name "${DB_NAME}" "$@"
fi
