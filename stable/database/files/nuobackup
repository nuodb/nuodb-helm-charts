#!/bin/bash

# (C) Copyright NuoDB, Inc. 2019-2021  All Rights Reserved
# This file is licensed under the BSD 3-Clause License.
# See https://github.com/nuodb/nuodb-helm-charts/blob/master/LICENSE
#
# simple script to automate backup.
#
# Runs in 1 of 2 modes:
# 1. perform a backup
# 2. return information from the KV store regarding the most recent backupset
#
# Each new FULL backup updates the information on the most recent backupset.
# Each new INCREMENTAL or JOURNAL backup is stored in the most recent backupset - as stored in the KV store.
# 
# There is support for a database to have multiple backup-groups - for example multiple data-centres.
# A backup can be specific to a backup-group, and the backup-groups can have different schedules.
#
# An optional semaphore can be specified - if the semaphore is specified, and not set in the KV store, then
# NO backup is performed.
# This allows a cronjob to run `nuobackup` on a schedule, and conditionally perform a backup if the semaphore has been set.
#
# The information of recent backups in the KV store is organised as a ringbuffer.
# This is to support keeping and providing information for point-in-time restores.
#

# args are:
#   --type     - backup type: ( full | incremental | journal | report-latest )
#   --db-name  - name of the database to backup
#   --group    - arbitrary group to select the SMs to backup. Often the datacentre or cloud name
#   --semaphore - an optional key in the KV store that will be referenced - with appended database and backup-group - to see if a backup has been requested.
#   --labels   - additional arbitrary labels to select the SMs to backup
#   --timeout  - timeout (in seconds) to synchronously wait for the backup to complete. 0 => wait forever.
#   --backup-root - directory tree to create the backupsets inside - eg /var/opt/nuodb/backup

# for debugging...
[ "$NUODB_DEBUG" = "verbose" ] && set -x 

: ${NUODB_MAX_BACKUP_HISTORY:=10}
: ${NUODB_BACKUP_KEY:=/nuodb/nuobackup}

backup_type="full"
db_name=$DB_NAME
backup_group=""
labels=""
semaphore=""
timeout=""
backup_root=$BACKUP_DIR
retry_failed="True"

function get_current_backup() {
   output=$( nuodocker get current-backup \
      --db-name "${db_name}" \
      --labels "${labels}" 2>/dev/null)
   echo "$output" | head -1 | awk '{print $2}'
}

function execute_backup() {
   local type="$1"
   local latest
   local current
   local next
   local backupset
   local output
   local failed

   extra_flags=()
   [ -n "$timeout" ] && extra_flags+=("--timeout" "${timeout}")

   # call nuodocker to perform the actual backup
   echo "Starting ${type} backup for database ${db_name} on processes with labels '${labels}' ..."
   output=$(nuodocker backup database \
      --db-name "${db_name}" \
      --type "${type}" \
      --backup-root "${backup_root}" \
      --labels "${labels}" \
      "${extra_flags[@]}" 2>&1)

   retval=$?
   echo "$output"
   if [ $retval != 0 ]; then
      echo >&2 "Error running hotcopy $retval"
      # Store failed backupset in KV store
      if [ "$type" = "full" ] && [ -n "$backup_group" ]; then
         backupset=$(get_current_backup)
         if [ -n "$backupset" ]; then
            failed=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/failed")
            nuocmd set value \
               --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/failed" \
               --value "${failed} ${backupset}" --expected-value "${failed}"
         fi
      fi
      if [ -n "$retry_failed" ] && [ "$type" = "journal" ] && echo "$output" | grep -q "Full or incremental hot copy must be completed before journal hot copy"; then
         # journal hot copy has been temporarly suspended due to archive sync;
         # perform incremental first and once completed retry the journal hot
         # copy
         retry_failed=""
         echo "Executing incremental hot copy as journal hot copy is temporarily suspended"
         execute_backup "incremental" || return $?
         # retry the journal backup which should succeed now
         execute_backup "journal"
         retval=$?
      fi
      return $retval
   fi

   if [ "$type" = "full" ] && [ -n "$backup_group" ]; then
      # clear all previous failed backupsets
      failed=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/failed")
      nuocmd set value \
         --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/failed" \
         --value "" --expected-value "${failed}"

      # store the new backupset as latest, and store the new latest index
      latest=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/latest" )
      current=${latest:-0}
      # bump latest, and wrap around (simple ring-buffer)
      next=$(( (current + 1) % $NUODB_MAX_BACKUP_HISTORY ))
      backupset=$(get_current_backup)

      if [ -n "$backupset" ]; then
         echo "$NUODB_BACKUP_KEY/$db_name/${backup_group}/latest = $next"
         echo "$NUODB_BACKUP_KEY/$db_name/${backup_group}/$next = $backupset"
         echo "$NUODB_BACKUP_KEY/$db_name/latest = $backup_group"

         nuocmd set value --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/$next" --value "$backupset" --expected-value "" && \
         nuocmd set value --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/latest" --value "$next" --expected-value "$latest" && \
         nuocmd set value --key "$NUODB_BACKUP_KEY/$db_name/latest" --value "$backup_group" --unconditional
      else
         echo >&2 "Unable to obtain backupset name. Skipping backupset recording"
      fi

      # update the list of known backup groups for this database
      group_list="$(nuocmd get value --key $NUODB_BACKUP_KEY/$db_name/backup-groups)"
      if [ -z "$(echo "$group_list" | grep -o $backup_group)" ]; then
         new_list="$group_list $backup_group"

         echo "$NUODB_BACKUP_KEY/$db_name/backup-groups = $new_list"
         nuocmd set value --key "$NUODB_BACKUP_KEY/$db_name/backup-groups" --value "$new_list" --expected-value "$group_list"
      fi
   fi
}

while [ $# -gt 0 ];
do
    opt="$1";
    shift;
    case "$opt" in
        "--" ) break 2;;
        "--type" )
           backup_type="$1"; shift;;
        "--type="* )
           backup_type="${opt#*=}";;
        "--db-name" )
           db_name="$1"; shift;;
        "--db-name="* )
           db_name="${opt#*=}";;
        "--group" )
           backup_group="$1"; shift;;
        "--group="* )
           backup_group="${opt#*=}";;
        "--labels" )
           labels="$1"; shift;;
        "--labels="* )
           labels="${opt#*=}";;
        "--semaphore" )
           semaphore="$1"; shift;;
        "--semaphore="* )
           semaphore="${opt#*=}";;
        "--timeout" )
           timeout="$1"; shift;;
        "--timeout="* )
           timeout="${opt#*=}";;
        "--backup-root" )
           backup_root="$1"; shift;;
        "--backup-root="* )
           backup_root="${opt#*=}";;
        *) echo >&2 "Invalid nuobackup option: $opt ($@)"; exit 1;;
   esac
done

backup_type=$(echo $backup_type | tr '[:upper:]' '[:lower:]')
if [ -n "$backup_group" ]; then
   labels="backup ${backup_group} ${labels}"
fi
# Wait forever for a backup to complete if timeout is set to 0
[ "$timeout" == "0" ] && timeout="525600"

# Return which group made the latest backup
if [ "$backup_type" = "report-latest" ]; then
   if [ -z "$backup_group" ]; then
      # retrieve the latest group name
      echo "$( nuocmd get value --key $NUODB_BACKUP_KEY/$db_name/latest )"
   else
      # retrieve the latest backupset name
      latest=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/latest" )
      echo "$( nuocmd get value --key $NUODB_BACKUP_KEY/$db_name/${backup_group}/${latest} )"
   fi
   exit 0
fi

# if $semaphore is not null, then check the value in Raft
if [ -n "$semaphore" ]; then
   if [ "$backup_group" != "" ]; then
      gate=$(nuocmd get value --key $semaphore/$db_name/$backup_group)

      # and reset the semaphore
      nuocmd set value --key $semaphore/$db_name/$backup_group --value '' --expected-value "$gate"
   else
      gate=$(nuocmd get value --key $semaphore/$db_name)

      # and reset the semaphore
      nuocmd set value --key $semaphore/$db_name --value '' --expected-value "$gate"
   fi


   if [ -z "$gate" ]; then
      echo "Semaphore $semaphore/$db_name empty - nothing to do"
      exit 0
   fi

   # wait for the database to be RUNNING
   nuocmd check database --db-name $db_name --check-running --wait-forever
fi

if [ "$backup_type" != "full" ]; then
   error="$( nuodocker get current-backup \
      --db-name "${db_name}" \
      --labels "${labels}" 2>&1)"
   if [ $? -ne 0 ] && echo "$error" | grep -q "No existing backup path found"; then
      # Check if full backup has been started already for all archiveIds
      # This will most likely execute in the following scenarious:
      # * initial database backup request
      # * backup request after the database have been restored
      # * new HC SM has been started since the last full backup
      echo "Executing full hotcopy as a prerequisite for ${backup_type} hotcopy: ${error}"
      execute_backup "full"
   fi

   if [ "$backup_type" == "incremental" ] && [ -n "$backup_group" ]; then
      backupset=$(get_current_backup)
      failed=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/failed")
      if [ -n "$backupset" ] && echo "$failed" | grep -q "${backupset}"; then
         # Incremental hotcopy requires a full hotcopy element in the backupset;
         # in case the full hotcopy has failed, all incrementals using that
         # backupset will fail until next full hotcopy is scheduled; if the
         # failure is transient or user corrected the problem (like freeing some
         # disk space), then executing another full will have a great chance to
         # finish
         error="full hotcopy in backupset ${backupset} has failed"
         echo "Executing full hotcopy as a prerequisite for ${backup_type} hotcopy: ${error}"
         execute_backup "full"
      fi
   fi
fi

execute_backup "$backup_type"