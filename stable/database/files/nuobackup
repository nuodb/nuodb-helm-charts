#!/bin/bash

# (C) Copyright NuoDB, Inc. 2019-2021  All Rights Reserved
# This file is licensed under the BSD 3-Clause License.
# See https://github.com/nuodb/nuodb-helm-charts/blob/master/LICENSE
#
# simple script to automate backup.
#
# Runs in 1 of 2 modes:
# 1. perform a backup
# 2. return information from the KV store regarding the most recent backupset
#
# Each new FULL backup updates the information on the most recent backupset.
# Each new INCREMENTAL or JOURNAL backup is stored in the most recent backupset - as stored in the KV store.
# 
# There is support for a database to have multiple backup-groups - for example multiple data-centres.
# A backup can be specific to a backup-group, and the backup-groups can have different schedules.
#
#
# The information of recent backups in the KV store is organised as a ringbuffer.
# This is to support keeping and providing information for point-in-time restores.
#

# args are:
#   --type     - backup type: ( full | incremental | journal | report-latest | report-groups | report-backups )
#   --db-name  - name of the database to backup
#   --group    - backup group name for the selected the SMs to backup. Often the datacentre or cloud name
#   --labels   - process labels to select the SMs to backup
#   --timeout  - timeout (in seconds) to synchronously wait for the backup to complete. 0 => wait forever.
#   --backup-root - directory tree to create the backupsets inside - eg /var/opt/nuodb/backup

# for debugging...
[ "$NUODB_DEBUG" = "verbose" ] && set -x 

: ${NUODB_MAX_BACKUP_HISTORY:=10}
: ${NUODB_BACKUP_KEY:=/nuodb/nuobackup}

backup_type="full"
db_name=$DB_NAME
backup_group=""
labels=""
timeout=""
backup_root=$BACKUP_DIR
backup_database_output=""

function get_current_backup() {
   output=$( nuodocker get current-backup \
      --db-name "${db_name}" \
      --labels "${labels}" 2>/dev/null)
   echo "$output" | head -1 | awk '{print $2}'
}

function execute_backup() {
   local type="$1"
   local latest
   local current
   local next
   local backupset
   local failed
   local pods

   extra_flags=()
   [ -n "$timeout" ] && extra_flags+=("--timeout" "${timeout}")

   # call nuodocker to perform the actual backup
   echo "Starting ${type} backup for database ${db_name} on processes with labels '${labels}' ..."
   backup_database_output=$(nuodocker backup database \
      --db-name "${db_name}" \
      --type "${type}" \
      --backup-root "${backup_root}" \
      --labels "${labels}" \
      "${extra_flags[@]}" 2>&1)

   retval=$?
   echo "$backup_database_output"
   if [ $retval != 0 ]; then
      echo >&2 "Error running hotcopy $retval"
      # Store failed backupset in KV store
      if [ "$type" = "full" ] && [ -n "$backup_group" ]; then
         backupset=$(get_current_backup)
         if [ -n "$backupset" ]; then
            failed=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/failed")
            nuocmd set value \
               --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/failed" \
               --value "${failed} ${backupset}" --expected-value "${failed}"
         fi
      fi
      return $retval
   fi

   if [ "$type" = "full" ] && [ -n "$backup_group" ]; then
      current_backup=$(nuodocker get current-backup \
         --db-name "${db_name}" \
         --labels "${labels}" 2>/dev/null)
      processes=$(nuocmd get processes --db-name "${db_name}")
      exited_processes=$(nuocmd get processes --db-name "${db_name}" --exited)

      # clear all previous failed backupsets
      failed=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/failed")
      nuocmd set value \
         --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/failed" \
         --value "" --expected-value "${failed}"

      latest=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/latest" )
      current=${latest:-0}
      # bump latest, and wrap around (simple ring-buffer)
      next=$(( (current + 1) % $NUODB_MAX_BACKUP_HISTORY ))
      # the backupset for all archives in the backup group will be the same
      # after a successful hotcopy
      backupset=$(echo "$current_backup" | head -1 | awk '{print $2}')
      # get all pods that participated in the hotcopy from the "pod-name"
      # process label
      pods=()
      for archive_id in $(echo "$current_backup" | awk '{print $1}'); do
         pod_name=$(echo "$processes" | grep "archive_id=${archive_id}" | grep -oP '(?<="pod-name":")[^"]+')
         if [ -z "$pod_name" ]; then
            pod_name=$(echo "$exited_processes" | grep "archive_id=${archive_id}" | grep -oP '(?<="pod-name":")[^"]+')
         fi
         pods+=("$pod_name")
      done

      if [ -n "$backupset" ]; then
         # store the new backupset as latest, and store the new latest index
         echo "$NUODB_BACKUP_KEY/$db_name/${backup_group}/latest = $next"
         echo "$NUODB_BACKUP_KEY/$db_name/${backup_group}/$next = $backupset"
         echo "$NUODB_BACKUP_KEY/$db_name/${backup_group}/$next/pods = [${pods[*]}]"
         echo "$NUODB_BACKUP_KEY/$db_name/latest = $backup_group"

         nuocmd set value --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/$next" --value "$backupset" --expected-value "" && \
         nuocmd set value --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/$next/pods" --value "${pods[*]}" --expected-value "" && \
         nuocmd set value --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/latest" --value "$next" --expected-value "$latest" && \
         nuocmd set value --key "$NUODB_BACKUP_KEY/$db_name/latest" --value "$backup_group" --unconditional
      else
         echo >&2 "Unable to obtain backupset name. Skipping backupset recording"
      fi

      # update the list of known backup groups for this database
      group_list="$(nuocmd get value --key $NUODB_BACKUP_KEY/$db_name/backup-groups)"
      if [ -z "$(echo "$group_list" | grep -o $backup_group)" ]; then
         new_list="$group_list $backup_group"

         echo "$NUODB_BACKUP_KEY/$db_name/backup-groups = $new_list"
         nuocmd set value --key "$NUODB_BACKUP_KEY/$db_name/backup-groups" --value "$new_list" --expected-value "$group_list"
      fi
   elif [ -n "$backup_group" ]; then
      # update the backup group that performed the latest backup
      latest=$( nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/latest" )
      nuocmd set value --key "$NUODB_BACKUP_KEY/$db_name/latest" --value "$backup_group" --expected-value "$latest"
   fi
}

function full_exist() {
   local error

   error="$( nuodocker get current-backup \
      --db-name "${db_name}" \
      --labels "${labels}" 2>&1)"
   if [ $? -ne 0 ] && echo "$error" | grep -q "No existing backup path found"; then
      # Check if full backup has been started already for all archiveIds. It
      # won't be the case in the following scenarios:
      # * initial database backup request
      # * backup request after the database have been restored
      # * new HC SM has been started in the backup group since the last full
      #   backup
      # * the backup group selection has been changed
      return 1
   fi
   return 0
}

function last_full_failed() {
   local backupset
   local failed

   backupset=$(get_current_backup)
   failed=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/failed")
   if [ -n "$backupset" ] && echo "$failed" | grep -q "${backupset}"; then
      return 0
   fi
   return 1
}

function execute_full() {
   execute_backup "full"
}

function execute_incremental() {
   local backupset

   if ! full_exist; then
      echo "Executing full hotcopy as a prerequisite for incremental hotcopy"
      execute_full
   elif last_full_failed; then
      # Incremental hotcopy requires a full hotcopy element in the backupset;
      # in case the full hotcopy has failed, all incrementals using that
      # backupset will fail until next full hotcopy is scheduled; if the
      # failure is transient or user corrected the problem (like freeing some
      # disk space), then executing another full will have a great chance to
      # finish
      backupset=$(get_current_backup)
      echo "Executing full hotcopy as a prerequisite for incremental hotcopy: full hotcopy in backupset ${backupset} has failed"
      execute_full
   else
      execute_backup "incremental"
   fi
}

function execute_journal() {
   local rc 

   if ! full_exist; then
      echo "Executing full hotcopy as a prerequisite for journal hotcopy"
      execute_full
   else 
      execute_backup "journal"
      rc=$?
      if [ $rc -ne 0 ]; then
         if echo "$backup_database_output" | grep -q "Full or incremental hot copy must be completed before journal hot copy"; then
            # journal hot copy has been temporarly suspended due to archive sync;
            # perform incremental hot copy first
            echo "Executing incremental hot copy as journal hot copy is temporarily suspended"
            execute_incremental || return $?
            # retry the journal backup which should succeed now
            execute_backup "journal"
         else
            return $rc
         fi
      fi
   fi
}

while [ $# -gt 0 ];
do
    opt="$1";
    shift;
    case "$opt" in
        "--" ) break 2;;
        "--type" )
           backup_type="$1"; shift;;
        "--type="* )
           backup_type="${opt#*=}";;
        "--db-name" )
           db_name="$1"; shift;;
        "--db-name="* )
           db_name="${opt#*=}";;
        "--group" )
           backup_group="$1"; shift;;
        "--group="* )
           backup_group="${opt#*=}";;
        "--labels" )
           labels="$1"; shift;;
        "--labels="* )
           labels="${opt#*=}";;
        "--timeout" )
           timeout="$1"; shift;;
        "--timeout="* )
           timeout="${opt#*=}";;
        "--backup-root" )
           backup_root="$1"; shift;;
        "--backup-root="* )
           backup_root="${opt#*=}";;
        *) echo >&2 "Invalid nuobackup option: $opt ($*)"; exit 1;;
   esac
done

backup_type=$(echo $backup_type | tr '[:upper:]' '[:lower:]')
# include all HCSMs if no labels are provided
[ -z "$labels" ] && labels="role hotcopy"
# Wait forever for a backup to complete if timeout is set to 0
[ "$timeout" == "0" ] && timeout="525600"

# Return which group made the latest backup
if [ "$backup_type" = "report-latest" ]; then
   if [ -z "$backup_group" ]; then
      # retrieve the latest group name
      echo "$( nuocmd get value --key $NUODB_BACKUP_KEY/$db_name/latest )"
   else
      # retrieve the latest backupset name
      latest=$( nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/${backup_group}/latest" )
      echo "$( nuocmd get value --key $NUODB_BACKUP_KEY/$db_name/${backup_group}/${latest} )"
   fi
   exit 0
elif [ "$backup_type" = "report-groups" ]; then
   # Report all backup groups and the pods that participated in the latest
   # backup for each backup group
   for group in $(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/backup-groups"); do
      latest=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/${group}/latest" )
      last_pods=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/${group}/${latest}/pods")
      echo "${group} ${last_pods}"
   done
   exit 0
elif [ "$backup_type" = "report-backups" ]; then
   # Report all recorded backups for specific backup group or for all backup
   # groups; 
   groups="$backup_group"
   if [ -z "$groups" ]; then
      groups=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/backup-groups")
   fi
   for group in $groups; do
      i=1
      while true; do
         backupset=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/${group}/${i}")
         [ -z "$backupset" ] && break
         backup_pods=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/${group}/${i}/pods")
         echo "${group}:${i} ${backupset} ${backup_pods}"
         (( i=i+1 ))
      done
   done
   exit 0
fi

if [ "$backup_type" == "full" ]; then
   execute_full
elif [ "$backup_type" == "incremental" ]; then
   execute_incremental
elif [ "$backup_type" == "journal" ]; then
   execute_journal
fi
