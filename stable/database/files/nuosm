#!/bin/sh

[ -n "$NUOSM_LINT" ] && set -n

. ${NUODB_HOME}/etc/nuodb_setup.sh

NUODB_DEBUG="false"
#[ -n "$NUODB_DEBUG" ] && set -x

: ${NUODB_ARCHIVEDIR:=/var/opt/nuodb/archive}
: ${NUODB_BACKUPDIR:=/var/opt/nuodb/backup}
: ${NUODB_DOMAIN:="nuodb"}
: ${NUODB_SEQUENCE_SYNC:=true}

: ${NUODB_IMPORT_CREDENTIALS:=:}

startup_key="/nuodb/nuosm/startup"

DB_DIR=${NUODB_ARCHIVEDIR}/${NUODB_DOMAIN}/${DB_NAME}

NUODB_BINDIR=$NUODB_HOME/bin
[ -z "$NUOCMD" ] && NUOCMD="$NUODB_BINDIR/nuocmd --api-server $NUOCMD_API_SERVER"

# attempt to retain the previous crash directory (within the configured window to avoid filling the disk)
crashcount=$(find $NUODB_CRASHDIR/core* -maxdepth 0 ! -type d 2>/dev/null | wc -l)
if [ $crashcount -ge 1 ]; then
  retainedcrashcount=$(find $NUODB_LOGDIR/crash-* -maxdepth 0 -type d -cmin -$OVERWRITE_WINDOW 2>/dev/null | wc -l)
  if [ $retainedcrashcount -lt $OVERWRITE_COPIES ]; then
    crashbackupdir="$NUODB_LOGDIR/crash-$( date +%Y%m%dT%H%M%S )/"
    mkdir $crashbackupdir
    mv $NUODB_CRASHDIR/core* $crashbackupdir
  fi
fi

export NUOCMD DB_NAME

#=======================================
# function - report an error and exit
#
function die() {
  # cleanup
  $NUOCMD set value --key $first_req --value '' --expected-value $HOSTNAME

  retval=$1
  shift
  echo "$@"
  exit $retval
}

#=======================================
# function - perform archive restore
#
function perform_restore() {

  retval=0
  error=

  # bail out early if the restore will obviously fail
  if [ -z "$( echo $restore_source | grep '^[a-z]\+:/[^ ]\+')" ]; then
    [ -d "$NUODB_BACKUPDIR/$restore_source" ] || error="Backupset $restore_source cannot be found in $NUODB_BACKUPDIR"
  fi

  # work out available space
  archSize="$(du -s $DB_DIR | grep -o '^ *[0-9]\+')"
  archSpace="$(df --output=avail $DB_DIR | grep -o ' *[0-9]\+')"

  if [ $(( archSize * 2 < archSpace)) ]; then
    saveName=$DB_DIR-save-$( date +%Y%m%dT%H%M%S )
    mv $DB_DIR $saveName
     
    retval=$?
    if [ $retval -ne 0 ]; then
      mv $saveName $DB_DIR
      error="Error moving archive in preparation for restore"
    fi
  else
    tarfile=$DB_DIR-$( date +%Y%m%dT%H%M%S ).tar.gz
    tar czf $tarfile $DB_DIR

    retval=$?
    if [ $retval -ne 0 ]; then
      rm -rf $tarfile
      error="Restore: unable to save existing archive to TAR file"
    fi

    archSpace="$(df --output=avail $DB_DIR | grep -o ' *[0-9]\+')"
    if [ $(( archSize + 1024000 > archSpace )) ]; then
      rm -rf $tarfile
      retval=-1
      error="Insufficient space for restore after archive has been saved to TAR."
    fi

    rm -rf $DB_DIR
  fi

  mkdir $DB_DIR

  # find the backup set and backup id
  # backupset=$(ls -tl $BACKUPDIR | head -n 1)
  # backup_id=$($NUODB_BINDIR/nuoarchive restore --report...
  # currently, backup-id is not supported

  # restore request is a URL - so retrieve the backup using curl
  if [ -n "$( echo $restore_source | grep '^[a-z]\+:/[^ ]\+')" ]; then
    echo "curl -k --user '**' $restore_source | tar xzf - --strip-components $strip_levels -C $DB_DIR"
    curl -k --user "$restore_credentials" $restore_source | tar xzf - --strip-components $strip_levels -C $DB_DIR

    chown -R $(echo "${NUODB_OS_USER:-1000}:${NUODB_OS_GROUP:-0}" | tr -d '"') $DB_DIR
  else
    $NUODB_BINDIR/nuoarchive restore --restore-dir $DB_DIR $NUODB_BACKUPDIR/$restore_source
  fi

  # # call nuodocker to fix the archive metadata
  # nuodocker --api-server $NUOCMD_API_SERVER restore archive --origin-dir $DB_DIR --restore-dir $DB_DIR --db-name $DB_NAME --clean-metadata

  # # completely delete my previous archive metadata
  # [ $myArchive -ge 0 ] && $NUOCMD delete archive --archive-id $myArchive --purge

  # clear the SM wait semaphore
  #$NUOCMD set value --key $startup_key/$DB_NAME --value '' --unconditional
}

#=============================
# main routine
#=============================
# ensure DB_DIR exists
if [ ! -e "${DB_DIR}" ] ; then
  mkdir -p "${DB_DIR}"
fi

first_req="$NUODB_RESTORE_REQUEST_PREFIX/$DB_NAME/first"

myArchive=$( $NUOCMD show archives --db-name $DB_NAME --archive-format "archive-id: {id}" | sed -En "/^archive-id: / {N; /$HOSTNAME/ s/^archive-id: ([0-9]+).*$/\1/; T; p}" | head -n 1 )
[ -z "$myArchive" ] && myArchive=-1
[ -n "$NUODB_DEBUG" ] && echo "myArchive=$myArchive; DB=$DB_NAME; hostname=$HOSTNAME"
[ -n "$NUODB_DEBUG" -a "$myArchive" = "-1" ] && echo "$($NUOCMD show archives --db-name $DB_NAME)"

# if a restore from backup has been requested, then do that now
restore_req="$NUODB_RESTORE_REQUEST_PREFIX/$DB_NAME/restore"
restore_requested="$( $NUOCMD get value --key $restore_req )"

if [ -n "$restore_requested" ]; then
  credential_req="$NUODB_RESTORE_REQUEST_PREFIX/$DB_NAME/restore/credentials"
  restore_credentials="$( $NUOCMD get value --key $credential_req )"
  [ -z "$restore_credentials" ] && restore_credentials=${DATABASE_RESTORE_CREDENTIALS:-:}

  strip_req="$NUODB_RESTORE_REQUEST_PREFIX/$DB_NAME/restore/strip-levels"
  strip_levels="$( $NUOCMD get value --key $strip_req )"
  [ -z "$strip_levels" ] && strip_levels=${DATABASE_RESTORE_STRIP_LEVELS:-1}
fi

# if my archive already exists
if [ "$myArchive" != "-1" ]; then

  # if a restore has been requested, then do that
  if [ -n "$restore_requested" ]; then
    restore_source=$restore_requested
    [ -n "$NUODB_DEBUG" ] && echo "restore requested: $restore_source"

  # else if the database is configured with a an AUTO_RESTORE, then specify that
  elif [ -n "$NUODB_AUTO_RESTORE" ]; then
    restore_source="$NUODB_AUTO_RESTORE"
    restore_credentials=${DATABASE_RESTORE_CREDENTIALS:-:}
    restore_type=${NUODB_AUTO_RESTORE_TYPE}
    strip_levels=${NUODB_RESTORE_STRIP_LEVELS:-1}
  fi

# my archive does not exist - check to see if we should IMPORT it
elif [ -n "$NUODB_AUTO_IMPORT" -a ! -f $DB_DIR/1.atm ]; then
  restore_source="$NUODB_AUTO_IMPORT"
  restore_credentials=${DATABASE_IMPORT_CREDENTIALS:-:}
  restore_type=${NUODB_AUTO_IMPORT_TYPE}
  strip_levels=${NUODB_IMPORT_STRIP_LEVELS:-1}
fi

# resolve ":latest"
if [ "$restore_source" = ":latest" ]; then

  # find which backup group performed the latest backup
  latest_group=$( nuobackup --type report-latest --db-name $DB_NAME )

  # if the latest backup was not by my group, then wait to allow an SM from the latest group to start first
  if [ "$latest_group" != "$NUODB_BACKUP_GROUP" ]; then
    echo ":latest backup was not made by my group $NUODB_BACKUP_GROUP - waiting to allow an SM from $latest_group to start..."

    # try for 30 seconds, sleeping every 2 seconds
    for retry in {1..30..2}; do
      sm="$($NUOCMD get value --key $first_req )"
      [ -n "$sm" ] && break
      sleep 2
    done

    [ -n "$sm" ] && echo "Primary restore SM='${sm}'..." || echo "No Primary restore SM found - attempting restore from $NUODB_BACKUP_GROUP..."
  fi
fi

# resolve the latest backup for the specified backup group
if [ "$restore_source" = ":latest" -o "$restore_source" = ":group-latest" ]; then
  [ -n "$NUODB_DEBUG" ] && echo "Resolving restore '$restore_source'..."
  restore_source=$( nuobackup --type report-latest --db-name $DB_NAME --group $NUODB_BACKUP_GROUP )
  [ -n "$NUODB_DEBUG" ] && echo "Latest restore for $NUODB_BACKUP_GROUP resolved to $restore_source"
fi

if [ -n "$restore_requested" -a -n "$restore_source" ]; then

  # work out who is the first one in
  $NUOCMD set value --key $first_req --value $HOSTNAME --expected-value ''
  first_in="$( $NUOCMD get value --key $first_req )"

  echo "First-in = $first_in"

  # if I got in first - perform the restore
  if [ "$first_in" = "$HOSTNAME" ]; then

    echo "I am first-in: $first_in == $HOSTNAME"

    # [ -z "$restore_source" ] && die -1 "There is no valid LATEST backup - restore of LATEST failed."

    # take ownership of the SM startup semaphore
    $NUOCMD set value --key $startup_key/$DB_NAME --value $HOSTNAME --unconditional

    # disable all the archive metadata so that get-archive-history will not look for other SMs
    archive_ids=$( $NUOCMD get archives --db-name $DB_NAME | grep -o "id=[0-9]\+" | grep -o "[0-9]\+")
    [ -z "$NUODB_DEBUG" ] && echo "archives: $archive_ids"

    # delete all archives but my own
    for archv in $archive_ids; do
      [ "$archv" -ne "$myArchive" ] && $NUOCMD delete archive --archive-id $archv
    done

    # and restore the data
    perform_restore

    # clear/release shared state
    # $NUOCMD set value --key $first_req --value '' --expected-value $HOSTNAME
    # $NUOCMD set value --key $restore_req --value '' --expected-value $restore_requested
    $NUOCMD set value --key $credential_req --value '' --unconditional


    # any error is a fatal error
    [ "$retval" = "0" ] || die $retval $error

  else
    # attempt to restore the same backup that the initial SM is restoring - to reduce SYNC time
    if [ -n "$( echo $restore_source | grep '^[a-z]\+:/[^ ]\+')" -o -d $NUODB_BACKUPDIR/$restore_source ]; then
      perform_restore

      # any error in a SEED restore is logged, but not fatal
      [ -n "$error" ] && echo "WARNING: Error performing SEED restore: $error"
    fi
  fi

  # wait until it's my turn to startup
  until owner=$( $NUOCMD get value --key $startup_key/$DB_NAME ); [ "$owner" = "$HOSTNAME" -o "$NUODB_SEQUENCE_SYNC" = "false" ] ; do

    # find the start-id of the SM that owns the semaphore
    owner_id=$( $NUOCMD show database --db-name $DB_NAME --skip-exited --process-format "{engine_type}: {address} start-id: {start_id};" | grep -E "^ *SM: $owner" | grep -Eo "start-id: [[0-9]+" | grep -Eo "[0-9]+")
    if [ -z "$owner_id" ]; then
      echo "Could not find start-id for starting SM on $owner - retrying..."
      sleep 30
      continue
    fi

    # wait for the starting SM to be RUNNING
    $NUOCMD check process --start-id $owner_id --check-running --wait-forever

    # transfer ownership of the startup semaphore to myself
    $NUOCMD set value --key $startup_key/$DB_NAME --value $HOSTNAME --expected-value $owner
  done

  # call nuodocker to fix the archive metadata
  nuodocker --api-server $NUOCMD_API_SERVER restore archive --origin-dir $DB_DIR --restore-dir $DB_DIR --db-name $DB_NAME --clean-metadata

  # completely delete my previous archive metadata
  # this is required because nuodocker always creates a new archive
  [ $myArchive -ge 0 ] && $NUOCMD delete archive --archive-id $myArchive --purge

fi

# release my archive if it is locked
# this will likely never execute but has been left in for completeness
locked_archive=$( $NUOCMD show archives --db-name $DB_NAME --removed --removed-archive-format "archive-id: {id}" | sed -En "/^archive-id: / {N; /$HOSTNAME/ s/^archive-id: ([0-9]+).*$/\1/; T; p}" | head -n 1 )
[ -n "$locked_archive" ] && $NUOCMD create archive --db-name $DB_NAME --archive-path $DB_DIR --is-external --restored --archive-id $locked_archive

# if a RESTORE_SOURCE is defined, and the archive dir is empty, then import/restore from the URL
if [ -n "$restore_source" -a -z "$restore_requested" -a ! -f $DB_DIR/1.atm ]; then

  # if the NUODB_IMPORT_URL has a protocol:/ prefix, then use curl to download the archive
  if [ -n "$( echo $restore_source | grep '^[a-z]\+:/[^ ]\+')" ]; then

    # define the download directory depending on the type of source
    if [ "$restore_type" = "stream" ]; then
      auto_download_dir=$DB_DIR
    else
      # It is a backupset so switch the download to somewhere temporary available on all SMs (it will be removed later)
      # This will also run if TYPE has a mistake since it works for either type, but will be less efficient.
      auto_download_dir=$(basename $restore_source)
      auto_download_dir="${NUODB_ARCHIVEDIR}/${NUODB_DOMAIN}/$(basename $auto_download_dir .${auto_download_dir#*.})-downloaded"
      mkdir $auto_download_dir
    fi
    
    # download the source
    echo "curl -k --user '**' $restore_source | tar xzf - --strip-components $strip_levels -C $auto_download_dir"
    curl -k --user "$restore_credentials" $restore_source | tar xzf - --strip-components $strip_levels -C $auto_download_dir

    chown -R $(echo "${NUODB_OS_USER:-1000}:${NUODB_OS_GROUP:-0}" | tr -d '"') $DB_DIR

    [ -n "$NUODB_DEBUG" ] && ls -l $DB_DIR
    
    # restore and/or fix the metadata
    nuodocker --api-server $NUOCMD_API_SERVER restore archive --origin-dir $auto_download_dir --restore-dir $DB_DIR --db-name $DB_NAME --clean-metadata
    
    if [ "$auto_download_dir" != "$DB_DIR" ]; then
      echo "removing $auto_download_dir"
      rm -rf $auto_download_dir
    fi

  elif [ -d "$NUODB_BACKUPDIR/$restore_source" ]; then
    # NUODB_IMPORT_URL has no protocol - so just append the --restore-from-dir option
    set -- --restore-from-dir "$NUODB_BACKUPDIR/$restore_source" "$@"
  fi
  # completely delete my previous archive metadata
  [ $myArchive -ge 0 ] && $NUOCMD delete archive --archive-id $myArchive --purge
fi

# release the first-in semaphore
[ -n "$first_in" ] && $NUOCMD set value --key $first_req --value '' --expected-value $HOSTNAME

# clear the restore_request
[ -n "$restore_requested" ] && $NUOCMD set value --key $restore_req --value '' --expected-value "$restore_requested"

# expects NUOCMD_API_SERVER to be set.
if [ -n "${NUODB_OPTIONS}" ] ; then
    exec nuodocker start sm --archive-dir "${DB_DIR}" --dba-user "${DB_USER}" --dba-password "${DB_PASSWORD}" --db-name "${DB_NAME}" --options "${NUODB_OPTIONS}" "$@"
else
    exec nuodocker start sm --archive-dir "${DB_DIR}" --dba-user "${DB_USER}" --dba-password "${DB_PASSWORD}" --db-name "${DB_NAME}" "$@"
fi
