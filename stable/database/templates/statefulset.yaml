{{/* 
  Remove this conditional rendering when support for storage groups is added
*/}}
{{- if eq (include "defaulttrue" .Values.database.primaryRelease) "true" }}
{{- if eq (include "defaulttrue" .Values.database.sm.noHotCopy.enablePod) "true" }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    description: |-
      Database deployment resource for NuoDB Storage Engines (SM).
    kubectl.kubernetes.io/default-container: engine
    kubectl.kubernetes.io/default-logs-container: engine
  labels:
    {{- include "database.resourceLabels" . | nindent 4 }}
  name: sm-{{ template "database.fullname" . }}
spec:
  replicas: {{ .Values.database.sm.noHotCopy.replicas }}
  selector:
    matchLabels:
      app: {{ template "database.fullname" . }}
      component: sm
      role: nohotcopy
  podManagementPolicy: Parallel
  serviceName: {{ .Values.database.name }}
  template:
    metadata:
      {{- if .Values.database.podAnnotations }}
      annotations:
{{ toYaml .Values.database.podAnnotations | trim | indent 8 }}
      {{- end }}
      labels:
        {{- include "database.resourceLabels" . | nindent 8 }}
        component: sm
        role: nohotcopy
    spec:
      serviceAccountName: {{ default "" .Values.nuodb.serviceAccount }}
      terminationGracePeriodSeconds: 15
      {{- include "securityContext" . | indent 6 }}
      {{- with .Values.database.sm.nodeSelector }}
      nodeSelector:
{{ toYaml . | trim | indent 8 }}
      {{- end }}
{{- if .Values.database.sm.affinity }}
      affinity:
{{ tpl .Values.database.sm.affinity . | trim | indent 8 }}
{{- end }}
      {{- if .Values.database.sm.tolerations }}
      tolerations:
{{ toYaml .Values.database.sm.tolerations | trim | indent 8 }}
      {{- end }}
      {{- if eq (include "defaulttrue" .Values.database.initContainers.runInitDisk) "true" }}
      initContainers:
      - name: init-disk
        image: {{ template "init.image" . }}
        imagePullPolicy: {{ default "" .Values.busybox.image.pullPolicy | quote }}
        command:
          - sh
          - -c
          - find /mnt/* -maxdepth 1 -not \( -perm -0770 -user 1000 \) -exec chmod -R ug+rwx {} \; -exec chown -R 1000 {} \; -exec echo {} \;
        resources:
        {{- toYaml .Values.database.initContainers.resources | trim | nindent 10 }}
        volumeMounts:
        - name: archive-volume
          mountPath: /mnt/archive
        {{- if eq (include "defaultfalse" .Values.database.sm.noHotCopy.journalPath.enabled) "true"}}
        - name: journal-volume
          mountPath: /mnt/journal
        {{- end }}
        - name: log-volume
          mountPath: /mnt/logdir
        {{- if eq (include "defaulttrue" .Values.database.initContainers.runInitDiskAsRoot) "true" }}
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        {{- end }}
      {{- end }}
      containers:
      - name: engine
        image: {{ template "nuodb.image" . }}
        imagePullPolicy: {{ .Values.nuodb.image.pullPolicy }}
        args:
          - "nuosm"
          - "--servers-ready-timeout"
          - "300"
    {{- if .Values.database.isRestore }}
          - "--restored"
    {{- end }}
          - "--options"
          - "mem {{ .Values.database.sm.resources.requests.memory}} {{ include "opt.key-values" .Values.database.sm.engineOptions }}"
    {{- with .Values.database.sm.labels }}
          - "--labels"
          - "{{- include "opt.key-values" . }}"
    {{- end }}
    {{- with .Values.database.options }}
          - "--database-options"
          - "{{- include "opt.key-values" . }}"
    {{- end }}
    {{- include "database.otherOptions" .Values.database.sm.otherOptions | indent 10 }}
    {{- include "sc.containerSecurityContext" . | indent 8 }}
    {{- include "database.envFrom" . | indent 8 }}
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ template "database.secretName" . }}
              key: database-name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ template "database.secretName" . }}
              key: database-username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "database.secretName" . }}
              key: database-password
        - name: DATABASE_IMPORT_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: {{ template "database.secretName" . }}
              key: database-import-credentials
        - name: DATABASE_RESTORE_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: {{ template "database.secretName" . }}
              key: database-restore-credentials
        - { name: NUODB_DOMAIN,        value: "{{ .Values.admin.domain }}" }
        - { name: NUOCMD_API_SERVER,   value: "{{ template "admin.address" . }}:8888" }
        - { name: PEER_ADDRESS,        value: "{{ template "admin.address" . }}" }
        - { name: COMPONENT_NAME,      value: "sm" }
        - { name: OVERWRITE_COPIES,    value: "{{ .Values.database.sm.logPersistence.overwriteBackoff.copies | default "3" }}" }
        - { name: OVERWRITE_WINDOW,    value: "{{ .Values.database.sm.logPersistence.overwriteBackoff.windowMinutes | default "120" }}" }
        - { name: SEPARATE_JOURNAL,    value: "{{- include "defaultfalse" .Values.database.sm.noHotCopy.journalPath.enabled}}" }
{{- include "database.env" . | indent 8 }}
    {{- if .Values.admin.tlsKeyStore }}
      {{- if .Values.admin.tlsKeyStore.password }}
        - { name: NUODOCKER_KEYSTORE_PASSWORD,    value: {{ .Values.admin.tlsKeyStore.password | quote }} }
      {{- end }}
    {{- end }}
        ports:
        - containerPort: 48006
          protocol: TCP
        resources:
        {{- toYaml .Values.database.sm.resources | trim | nindent 10 }}
        volumeMounts:
        {{- with .Values.database.configFiles }}
        {{- range $key, $val := . }}
        - name: configurations
          mountPath: {{ $.Values.database.configFilesPath }}{{ $key }}
          subPath: {{ $key }}
        {{- end -}}
        {{- end }}
        - name: log-volume
          mountPath: /var/log/nuodb
        - name: nuosm
          mountPath: /usr/local/bin/nuosm
          subPath: nuosm
        - name: nuobackup
          mountPath: /usr/local/bin/nuobackup
          subPath: nuobackup
        - name: readinessprobe
          mountPath: /usr/local/bin/readinessprobe
          subPath: readinessprobe
        - mountPath: /var/opt/nuodb/archive
          name: archive-volume
        {{- if eq (include "defaultfalse" .Values.database.sm.noHotCopy.journalPath.enabled) "true"}}
        - name: journal-volume
          mountPath: /var/opt/nuodb/journal
        {{- end }}
        {{- if .Values.admin.tlsCACert }}
        - name: tls-ca-cert
          mountPath: /etc/nuodb/keys/ca.cert
          subPath: {{ .Values.admin.tlsCACert.key }}
        {{- end }}
        {{- if .Values.admin.tlsClientPEM }}
        - name: tls-client-pem
          mountPath: /etc/nuodb/keys/nuocmd.pem
          subPath: {{ .Values.admin.tlsClientPEM.key }}
        {{- end }}
        {{- if .Values.admin.tlsKeyStore }}
        - name: tls-keystore
          mountPath: /etc/nuodb/keys/nuoadmin.p12
          subPath: {{ .Values.admin.tlsKeyStore.key }}
        {{- end }}
        {{- if .Values.admin.tde }}
        {{- if .Values.admin.tde.secrets }}
        {{- if hasKey .Values.admin.tde.secrets .Values.database.name }}
        {{- range $dbName, $secret := .Values.admin.tde.secrets }}
        {{- if eq $dbName $.Values.database.name }}
        - name: tde-volume-{{ $dbName }}
          mountPath: {{ default "/etc/nuodb/tde" $.Values.admin.tde.storagePasswordsDir }}/{{ $dbName }}
          readOnly: true
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        readinessProbe:
          initialDelaySeconds: 10
          periodSeconds: 15
          exec:
            command: [ "readinessprobe" ]
          failureThreshold: 58
          # the SM becomes unready if it does not start within 15 minutes = 30s + 15s*58
          successThreshold: 2
          timeoutSeconds: {{ default 5 .Values.database.sm.readinessTimeoutSeconds }}
      {{- include "nuodb.sidecar" . | nindent 6 }}
{{- include "nuodb.imagePullSecrets" . | indent 6 }}
      volumes:
      {{- include "nuodb.sidecar.volumes" . | nindent 6 }}
      {{- if .Values.database.configFiles }}
      - name: configurations
        configMap:
          name: {{ template "database.fullname" . }}-configuration
      {{- end }}
      {{- if eq (include "defaultfalse" .Values.database.sm.logPersistence.enabled) "false" }}
      - name: log-volume
        emptyDir: {}
      {{- end }}
      - name: nuosm
        configMap:
          name: {{ template "database.fullname" . }}-nuosm
          defaultMode: 0777
      - name: nuobackup
        configMap:
          name: {{ template "database.fullname" . }}-nuobackup
          defaultMode: 0777
      - name: readinessprobe
        configMap:
          name: {{ template "database.fullname" . }}-readinessprobe
          defaultMode: 0777
      {{- if .Values.admin.tlsCACert }}
      - name: tls-ca-cert
        secret:
          secretName: {{ .Values.admin.tlsCACert.secret }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.admin.tlsClientPEM }}
      - name: tls-client-pem
        secret:
          secretName: {{ .Values.admin.tlsClientPEM.secret }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.admin.tlsKeyStore }}
      - name: tls-keystore
        secret:
          secretName: {{ .Values.admin.tlsKeyStore.secret }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.admin.tde }}
      {{- if .Values.admin.tde.secrets }}
      {{- if hasKey .Values.admin.tde.secrets .Values.database.name }}
      {{- range $dbName, $secret := .Values.admin.tde.secrets }}
      {{- if eq $dbName $.Values.database.name }}
      - name: tde-volume-{{ $dbName }}
        secret:
          secretName: {{ $secret }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: archive-volume
      labels:
        {{- include "database.resourceLabels" . | nindent 8 }}
    spec:
      accessModes:
      {{- range .Values.database.persistence.accessModes }}
        - {{ . }}
      {{- end }}
    {{- if .Values.database.persistence.storageClass }}
      {{- if (eq "-" .Values.database.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: {{ .Values.database.persistence.storageClass }}
      {{- end }}
    {{- end }}
{{- if .Values.database.isManualVolumeProvisioning }}
      selector:
        matchLabels:
          database: {{ .Values.database.name }}
{{- end }}
      resources:
        requests:
          storage: {{ .Values.database.persistence.size }}
  {{- if eq (include "defaultfalse" .Values.database.sm.noHotCopy.journalPath.enabled) "true"}}
  - metadata:
      name: journal-volume
      labels:
        {{- include "database.resourceLabels" . | nindent 8 }}
    spec:
      accessModes:
      {{- range .Values.database.sm.noHotCopy.journalPath.persistence.accessModes }}
        - {{ . }}
      {{- end }}
    {{- if .Values.database.sm.noHotCopy.journalPath.persistence.storageClass }}
      {{- if (eq "-" .Values.database.sm.noHotCopy.journalPath.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: {{ .Values.database.sm.noHotCopy.journalPath.persistence.storageClass }}
      {{- end }}
    {{- end }}
{{- if .Values.database.isManualVolumeProvisioning }}
      selector:
        matchLabels:
          database: {{ .Values.database.name }}
{{- end }}
      resources:
        requests:
          storage: {{ .Values.database.sm.noHotCopy.journalPath.persistence.size }}
  {{- end }}
  {{- if eq (include "defaultfalse" .Values.database.sm.logPersistence.enabled) "true" }}
  - metadata:
      name: log-volume
      labels:
        {{- include "database.resourceLabels" . | nindent 8 }}
    spec:
      accessModes:
      {{- range .Values.database.sm.logPersistence.accessModes }}
        - {{ . }}
      {{- end }}
    {{- if .Values.database.sm.logPersistence.storageClass }}
      {{- if (eq "-" .Values.database.sm.logPersistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: {{ .Values.database.sm.logPersistence.storageClass }}
      {{- end }}
    {{- end }}
      resources:
        requests:
          storage: {{ .Values.database.sm.logPersistence.size }}
  {{- end }}
{{- end }}

{{- if eq (include "defaulttrue" .Values.database.sm.hotCopy.enablePod) "true" }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    description: |-
      Database deployment resource for NuoDB Storage Engines (SM).
  labels:
    {{- include "database.resourceLabels" . | nindent 4 }}
  name: sm-{{ template "database.fullname" . }}-hotcopy
spec:
  replicas: {{ .Values.database.sm.hotCopy.replicas }}
  selector:
    matchLabels:
      app: {{ template "database.fullname" . }}
      component: sm
      role: hotcopy
  podManagementPolicy: Parallel
  serviceName: {{ .Values.database.name }}
  template:
    metadata:
      {{- if .Values.database.podAnnotations }}
      annotations:
{{ toYaml .Values.database.podAnnotations | trim | indent 8 }}
      {{- end }}
      labels:
        {{- include "database.resourceLabels" . | nindent 8 }}
        component: sm
        role: hotcopy
    spec:
      serviceAccountName: {{ default "" .Values.nuodb.serviceAccount }}
      terminationGracePeriodSeconds: 15
      {{- include "securityContext" . | indent 6 }}
      {{- with .Values.database.sm.nodeSelector }}
      nodeSelector:
{{ toYaml . | trim | indent 8 }}
      {{- end }}
{{- if .Values.database.sm.affinity }}
      affinity:
{{ tpl .Values.database.sm.affinity . | trim | indent 8 }}
{{- end }}
      {{- if .Values.database.sm.tolerations }}
      tolerations:
{{ toYaml .Values.database.sm.tolerations | trim | indent 8 }}
      {{- end }}
      {{- if eq (include "defaulttrue" .Values.database.initContainers.runInitDisk) "true" }}
      initContainers:
      - name: init-disk
        image: {{ template "init.image" . }}
        imagePullPolicy: {{ default "" .Values.busybox.image.pullPolicy | quote }}
        command:
          - sh
          - -c
          - find /mnt/* -maxdepth 1 -not \( -perm -0770 -user 1000 \) -exec chmod -R ug+rwx {} \; -exec chown -R 1000 {} \; -exec echo {} \;
        resources:
        {{- toYaml .Values.database.initContainers.resources | trim | nindent 10 }}
        volumeMounts:
        - name: archive-volume
          mountPath: /mnt/archive
        {{- if eq (include "defaultfalse" .Values.database.sm.hotCopy.journalPath.enabled) "true"}}
        - name: journal-volume
          mountPath: /mnt/journal
        {{- end }}
        - name: backup-volume
          mountPath: /mnt/backup
        - name: log-volume
          mountPath: /mnt/logdir
        {{- if eq (include "defaulttrue" .Values.database.initContainers.runInitDiskAsRoot) "true" }}
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        {{- end }}
      {{- end }}
      containers:
      - name: engine
        image: {{ template "nuodb.image" . }}
        imagePullPolicy: {{ .Values.nuodb.image.pullPolicy }}
        args:
          - "nuosm"
          - "--servers-ready-timeout"
          - "300"
          - "--options"
          - "mem {{ .Values.database.sm.resources.requests.memory}} {{- if and (eq (include "defaulttrue" .Values.database.sm.hotCopy.enableBackups) "true") (eq (include "defaultfalse" .Values.database.sm.hotCopy.journalBackup.enabled) "true") }} journal-hot-copy enable {{- end }} {{- include "opt.key-values" .Values.database.sm.engineOptions}}"
          - "--labels"
          - "role hotcopy backup {{ include "hotcopy.groupPrefix" . }} {{- include "opt.key-values" .Values.database.sm.labels }}"
{{- with .Values.database.options}}
          - "--database-options"
          - "{{- range $opt, $val := . -}} {{$opt}} {{$val}} {{ end}}"
{{- end}}
    {{- include "database.otherOptions" .Values.database.sm.otherOptions | indent 10 }}
    {{- include "sc.containerSecurityContext" . | indent 8 }}
    {{- include "database.envFrom" . | indent 8 }}
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ template "database.secretName" . }}
              key: database-name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ template "database.secretName" . }}
              key: database-username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "database.secretName" . }}
              key: database-password
        - name: DATABASE_IMPORT_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: {{ template "database.secretName" . }}
              key: database-import-credentials
        - name: DATABASE_RESTORE_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: {{ template "database.secretName" . }}
              key: database-restore-credentials
        - name: DATABASE_BACKUP_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: {{ template "database.secretName" . }}
              key: database-backup-credentials
        - { name: NUODB_DOMAIN,      value: "{{ .Values.admin.domain }}" }
        - { name: NUOCMD_API_SERVER, value: "{{ template "admin.address" . }}:8888" }
        - { name: PEER_ADDRESS,      value: "{{ template "admin.address" . }}" }
        - { name: COMPONENT_NAME,    value: "sm" }
        - { name: OVERWRITE_COPIES,  value: "{{ .Values.database.sm.logPersistence.overwriteBackoff.copies | default "3" }}" }
        - { name: OVERWRITE_WINDOW,  value: "{{ .Values.database.sm.logPersistence.overwriteBackoff.windowMinutes | default "120" }}" }
        - { name: SEPARATE_JOURNAL,  value: "{{- include "defaultfalse" .Values.database.sm.hotCopy.journalPath.enabled}}" }
{{- include "database.env" . | indent 8 }}
    {{- if .Values.admin.tlsKeyStore }}
      {{- if .Values.admin.tlsKeyStore.password }}
        - { name: NUODOCKER_KEYSTORE_PASSWORD,    value: {{ .Values.admin.tlsKeyStore.password | quote }} }
      {{- end }}
    {{- end }}
        ports:
        - containerPort: 48006
          protocol: TCP
        resources:
{{ toYaml .Values.database.sm.resources | trim | indent 10 }}
        volumeMounts:
        {{- with .Values.database.configFiles }}
        {{- range $key, $val := . }}
        - name: configurations
          mountPath: {{ $.Values.database.configFilesPath }}{{ $key }}
          subPath: {{ $key }}
        {{- end -}}
        {{- end }}
        - name: log-volume
          mountPath: /var/log/nuodb
        - name: nuosm
          mountPath: /usr/local/bin/nuosm
          subPath: nuosm
        - name: nuobackup
          mountPath: /usr/local/bin/nuobackup
          subPath: nuobackup
        - name: readinessprobe
          mountPath: /usr/local/bin/readinessprobe
          subPath: readinessprobe
        - mountPath: /var/opt/nuodb/archive
          name: archive-volume
        {{- if eq (include "defaultfalse" .Values.database.sm.hotCopy.journalPath.enabled) "true"}}
        - name: journal-volume
          mountPath: /var/opt/nuodb/journal
        {{- end }}
        - mountPath: /var/opt/nuodb/backup
          name: backup-volume
        {{- if .Values.admin.tlsCACert }}
        - name: tls-ca-cert
          mountPath: /etc/nuodb/keys/ca.cert
          subPath: {{ .Values.admin.tlsCACert.key }}
        {{- end }}
        {{- if .Values.admin.tlsClientPEM }}
        - name: tls-client-pem
          mountPath: /etc/nuodb/keys/nuocmd.pem
          subPath: {{ .Values.admin.tlsClientPEM.key }}
        {{- end }}
        {{- if .Values.admin.tlsKeyStore }}
        - name: tls-keystore
          mountPath: /etc/nuodb/keys/nuoadmin.p12
          subPath: {{ .Values.admin.tlsKeyStore.key }}
        {{- end }}
        {{- if .Values.admin.tde }}
        {{- if .Values.admin.tde.secrets }}
        {{- if hasKey .Values.admin.tde.secrets .Values.database.name }}
        {{- range $dbName, $secret := .Values.admin.tde.secrets }}
        {{- if eq $dbName $.Values.database.name }}
        - name: tde-volume-{{ $dbName }}
          mountPath: {{ default "/etc/nuodb/tde" $.Values.admin.tde.storagePasswordsDir }}/{{ $dbName }}
          readOnly: true
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        readinessProbe:
          initialDelaySeconds: 10
          periodSeconds: 15
          exec:
            command: [ "readinessprobe" ]
          failureThreshold: 58
          # the SM becomes unready if it does not start within 15 minutes = 30s + 15s*58
          successThreshold: 2
          timeoutSeconds: {{ default 5 .Values.database.sm.readinessTimeoutSeconds }}
      {{- include "nuodb.sidecar" . | nindent 6 }}
{{- include "nuodb.imagePullSecrets" . | indent 6 }}
      volumes:
      {{- include "nuodb.sidecar.volumes" . | nindent 6 }}
      {{- if .Values.database.configFiles }}
      - name: configurations
        configMap:
          name: {{ template "database.fullname" . }}-configuration
      {{- end }}
      {{- if eq (include "defaultfalse" .Values.database.sm.logPersistence.enabled) "false" }}
      - name: log-volume
        emptyDir: {}
      {{- end }}
      - name: nuosm
        configMap:
          name: {{ template "database.fullname" . }}-nuosm
          defaultMode: 0777
      - name: nuobackup
        configMap:
          name: {{ template "database.fullname" . }}-nuobackup
          defaultMode: 0777
      - name: readinessprobe
        configMap:
          name: {{ template "database.fullname" . }}-readinessprobe
          defaultMode: 0777
      {{- if .Values.admin.tlsCACert }}
      - name: tls-ca-cert
        secret:
          secretName: {{ .Values.admin.tlsCACert.secret }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.admin.tlsClientPEM }}
      - name: tls-client-pem
        secret:
          secretName: {{ .Values.admin.tlsClientPEM.secret }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.admin.tlsKeyStore }}
      - name: tls-keystore
        secret:
          secretName: {{ .Values.admin.tlsKeyStore.secret }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.admin.tde }}
      {{- if .Values.admin.tde.secrets }}
      {{- if hasKey .Values.admin.tde.secrets .Values.database.name }}
      {{- range $dbName, $secret := .Values.admin.tde.secrets }}
      {{- if eq $dbName $.Values.database.name }}
      - name: tde-volume-{{ $dbName }}
        secret:
          secretName: {{ $secret }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: archive-volume
      labels:
        {{- include "database.resourceLabels" . | nindent 8 }}
    spec:
      accessModes:
      {{- range .Values.database.persistence.accessModes }}
        - {{ . }}
      {{- end }}
    {{- if .Values.database.persistence.storageClass }}
      {{- if (eq "-" .Values.database.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: {{ .Values.database.persistence.storageClass }}
      {{- end }}
    {{- end }}
{{- if .Values.database.isManualVolumeProvisioning }}
      selector:
        matchLabels:
          database: {{ .Values.database.name }}
{{- end }}
      resources:
        requests:
          storage: {{ .Values.database.persistence.size }}
  {{- if eq (include "defaultfalse" .Values.database.sm.hotCopy.journalPath.enabled) "true"}}
  - metadata:
      name: journal-volume
      labels:
        {{- include "database.resourceLabels" . | nindent 8 }}
    spec:
      accessModes:
      {{- range .Values.database.sm.hotCopy.journalPath.persistence.accessModes }}
        - {{ . }}
      {{- end }}
    {{- if .Values.database.sm.hotCopy.journalPath.persistence.storageClass }}
      {{- if (eq "-" .Values.database.sm.hotCopy.journalPath.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: {{ .Values.database.sm.hotCopy.journalPath.persistence.storageClass }}
      {{- end }}
    {{- end }}
{{- if .Values.database.isManualVolumeProvisioning }}
      selector:
        matchLabels:
          database: {{ .Values.database.name }}
{{- end }}
      resources:
        requests:
          storage: {{ .Values.database.sm.hotCopy.journalPath.persistence.size }}
  {{- end }}
  - metadata:
      name: backup-volume
      labels:
        {{- include "database.resourceLabels" . | nindent 8 }}
    spec:
      accessModes:
      {{- range .Values.database.sm.hotCopy.persistence.accessModes }}
        - {{ . }}
      {{- end }}
    {{- if .Values.database.sm.hotCopy.persistence.storageClass }}
      {{- if (eq "-" .Values.database.sm.hotCopy.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: {{ .Values.database.sm.hotCopy.persistence.storageClass }}
      {{- end }}
    {{- end }}
      resources:
        requests:
          storage: {{ .Values.database.sm.hotCopy.persistence.size }}
  {{- if eq (include "defaultfalse" .Values.database.sm.logPersistence.enabled) "true" }}
  - metadata:
      name: log-volume
      labels:
        {{- include "database.resourceLabels" . | nindent 8 }}
    spec:
      accessModes:
      {{- range .Values.database.sm.logPersistence.accessModes }}
        - {{ . }}
      {{- end }}
    {{- if .Values.database.sm.logPersistence.storageClass }}
      {{- if (eq "-" .Values.database.sm.logPersistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: {{ .Values.database.sm.logPersistence.storageClass }}
      {{- end }}
    {{- end }}
      resources:
        requests:
          storage: {{ .Values.database.sm.logPersistence.size }}
  {{- end }}
{{- end }}
{{- end }}
