{{- if .Values.database.enableDaemonSet }}
{{- if .Values.database.sm.noHotCopy.enablePod }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels: 
    app: {{ template "database.fullname" . }}
    group: nuodb
    database: {{ .Values.database.name }}
    domain: {{ .Values.admin.domain }}
    chart: {{ template "database.chart" . }}
    release: {{ .Release.Name | quote }}    
  name: sm-{{ template "database.fullname" . }}
spec:
  selector:
    matchLabels:
      app: {{ template "database.fullname" . }}
      component: sm
      role: nohotcopy
  template:
    metadata:
      labels:
        app: {{ template "database.fullname" . }}
        component: sm
        role: nohotcopy
        group: nuodb
        database: {{ .Values.database.name }}
        domain: {{ .Values.admin.domain }}
        chart: {{ template "database.chart" . }}
        release: {{ .Release.Name | quote }}
    spec:
      serviceAccountName: {{ default "nuodb" .Values.nuodb.serviceAccount }}
{{- with .Values.database.sm.nodeSelectorNoHotCopyDS }}
      nodeSelector:
{{ toYaml . | trim | indent 8 }}
{{- end }}
{{- if .Values.database.sm.affinityNoHotCopyDS }}
      affinity:
{{ tpl .Values.database.sm.affinityNoHotCopyDS . | trim | indent 8 }}
{{- end }}
      {{- if .Values.database.sm.tolerationsDS }}
      tolerations:
{{ toYaml .Values.database.sm.tolerationsDS | trim | indent 8 }}
      {{- end }}          
      containers:
      - name: sm
        image: {{ template "nuodb.image" . }}
        imagePullPolicy: {{ .Values.nuodb.image.pullPolicy }}
    {{- include "database.capabilities" . | indent 8 }}
        args:
          - "nuosm"
          - "--servers-ready-timeout"
          - "300"
    {{- if .Values.database.isRestore }}
          - "--restored"
    {{end}}
          - "--options"
          - "mem {{ .Values.database.sm.resources.requests.memory}} {{- include "opt.key-values" .Values.database.sm.engineOptions}}"
    {{- with .Values.database.sm.labels }}
          - "--labels"
          - "{{- include "opt.key-values" . }}"
    {{- end }}
{{- if .Values.database.options }}
          - "--database-options"
          - "{{- range $opt, $val := .Values.database.options -}} {{$opt}} {{$val}} {{end}}"
{{- end }}
{{- range $opt, $val := .Values.database.sm.otherOptions }}
          - "--{{$opt}}"
          - "{{$val}}"
{{- end}}
    {{- include "database.envFrom" . | indent 8 }}
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.name }}.nuodb.com
              key: database-name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.name }}.nuodb.com
              key: database-username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.name }}.nuodb.com
              key: database-password
        - name: NUODB_IMPORT_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.name }}.nuodb.com
              key: database-import-credentials
        - { name: NUODB_DOMAIN,        value: {{ .Values.admin.domain }} }
        - { name: NUOCMD_API_SERVER,   value: "{{ template "admin.address" . }}:8888" }
        - { name: PEER_ADDRESS,        value: "{{ template "admin.address" . }}" }
        - { name: NUDOB_ARCHIVEDIR,    value: "/var/opt/nuodb/archive/${NODE_NAME}" }
        - { name: COMPONENT_NAME,      value: "sm" }
{{- include "database.env" . | indent 8 }}
    {{- if .Values.admin.tlsKeyStore }}
      {{- if .Values.admin.tlsKeyStore.password }}
        - { name: NUODOCKER_KEYSTORE_PASSWORD,    value: {{ .Values.admin.tlsKeyStore.password | quote }} }
      {{- end }}
    {{- end }}
        ports:
        - containerPort: 48006
          protocol: TCP
        resources:
{{ toYaml .Values.database.sm.resources | trim | indent 10 }}
        volumeMounts:
        - name: log-volume
          mountPath: /var/log/nuodb
        - name: nuosm
          mountPath: /usr/local/bin/nuosm
          subPath: nuosm
        - name: nuobackup
          mountPath: /usr/local/bin/nuobackup
          subPath: nuobackup
        - name: readinessprobe
          mountPath: /usr/local/bin/readinessprobe
          subPath: readinessprobe
        - name: archive-volume
          mountPath: /var/opt/nuodb/archive
        {{- if .Values.admin.tlsCACert }}
        - name: tls-ca-cert
          mountPath: /etc/nuodb/keys/ca.cert
          subPath: {{ .Values.admin.tlsCACert.key }}
        {{- end }}
        {{- if .Values.admin.tlsClientPEM }}
        - name: tls-client-pem
          mountPath: /etc/nuodb/keys/nuocmd.pem
          subPath: {{ .Values.admin.tlsClientPEM.key }}
        {{- end }}
        {{- if .Values.admin.tlsKeyStore }}
        - name: tls-keystore
          mountPath: /etc/nuodb/keys/nuoadmin.p12
          subPath: {{ .Values.admin.tlsKeyStore.key }}
        {{- end }}
        readinessProbe:
          initialDelaySeconds: 30
          periodSeconds: 15
          exec:
            command: [ "readinessprobe" ]
          failureThreshold: 58
          # the SM becomes unready if it does not start within 15 minutes = 30s + 15s*58
          successThreshold: 2
          timeoutSeconds: 5
{{- include "nuodb.imagePullSecrets" . | indent 6 }}
      volumes:
      - name: log-volume
        emptyDir: {}
      - name: nuosm
        configMap:
          name: {{ template "database.fullname" . }}-nuosm
          defaultMode: 0777
      - name: nuobackup
        configMap:
          name: {{ template "database.fullname" . }}-nuobackup
          defaultMode: 0777
      - name: readinessprobe
        configMap:
          name: {{ template "database.fullname" . }}-readinessprobe
          defaultMode: 0777
      - name: archive-volume
        persistentVolumeClaim:
          claimName: {{ .Values.database.name }}-archive
      {{- if .Values.admin.tlsCACert }}
      - name: tls-ca-cert
        secret:
          secretName: {{ .Values.admin.tlsCACert.secret }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.admin.tlsClientPEM }}
      - name: tls-client-pem
        secret:
          secretName: {{ .Values.admin.tlsClientPEM.secret }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.admin.tlsKeyStore }}
      - name: tls-keystore
        secret:
          secretName: {{ .Values.admin.tlsKeyStore.secret }}
          defaultMode: 0440
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 15

{{- end }}
{{- if .Values.database.sm.hotCopy.enablePod }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels: 
    app: {{ template "database.fullname" . }}
    group: nuodb
    database: {{ .Values.database.name }}
    domain: {{ .Values.admin.domain }}
    chart: {{ template "database.chart" . }}
    release: {{ .Release.Name | quote }}
  name: sm-{{ template "database.fullname" . }}-hotcopy
spec:
  selector:
    matchLabels:
      app: {{ template "database.fullname" . }}
      component: sm
      role: hotcopy
  template:
    metadata:
      labels:
        app: {{ template "database.fullname" . }}
        component: sm
        role: hotcopy
        group: nuodb
        database: {{ .Values.database.name }}
        domain: {{ .Values.admin.domain }}
        chart: {{ template "database.chart" . }}
        release: {{ .Release.Name | quote }}
    spec:
      serviceAccountName: {{ default "nuodb" .Values.nuodb.serviceAccount }}
{{- with .Values.database.sm.nodeSelectorHotCopyDS }}
      nodeSelector:
{{ toYaml . | trim | indent 8 }}
{{- end }}
{{- if .Values.database.sm.affinityHotCopyDS }}
      affinity:
{{ tpl .Values.database.sm.affinityHotCopyDS . | trim | indent 8 }}
{{- end }}
      {{- if .Values.database.sm.tolerationsDS }}
      tolerations:
{{ toYaml .Values.database.sm.tolerationsDS | trim | indent 8 }}
      {{- end }}
      containers:
      - name: sm
        image: {{ template "nuodb.image" . }}
        imagePullPolicy: {{ .Values.nuodb.image.pullPolicy }}
    {{- include "database.capabilities" . | indent 8 }}
        args:
          - "nuosm"
          - "--servers-ready-timeout"
          - "300"
          - "--options"
          - "mem {{ .Values.database.sm.resources.requests.memory}} {{- if and (eq (include "defaulttrue" .Values.database.sm.hotCopy.enableBackups) "true") .Values.database.sm.hotCopy.journalBackup.enabled }} journal-hot-copy enable {{- end }} {{- include "opt.key-values" .Values.database.sm.engineOptions}}"
          - "--labels"
          - "backup {{ include "hotcopy.group" . }} {{- include "opt.key-values" .Values.database.sm.labels }}"
    {{- with .Values.database.options }}
          - "--database-options"
          - "{{- range $opt, $val := . -}} {{$opt}} {{$val}} {{end}}"
    {{- end}}
{{- range $opt, $val := .Values.database.sm.otherOptions }}
          - "--{{$opt}}"
          - "{{$val}}"
{{- end}}
    {{- include "database.envFrom" . | indent 8 }}
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.name }}.nuodb.com
              key: database-name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.name }}.nuodb.com
              key: database-username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.name }}.nuodb.com
              key: database-password
        - name: NUODB_IMPORT_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.name }}.nuodb.com
              key: database-import-credentials
        - name: NUODB_BACKUP_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.name }}.nuodb.com
              key: database-backup-credentials
        - { name: NUODB_DOMAIN,        value: {{ .Values.admin.domain }} }
        - { name: NUOCMD_API_SERVER,   value: "{{ template "admin.address" . }}:8888" }
        - { name: PEER_ADDRESS,        value: "{{ template "admin.address" . }}" }
        - { name: NUDOB_ARCHIVEDIR,    value: "/var/opt/nuodb/archive/${NODE_NAME}" }
        - { name: COMPONENT_NAME,      value: "sm" }
{{- include "database.env" . | indent 8 }}
    {{- if .Values.admin.tlsKeyStore }}
      {{- if .Values.admin.tlsKeyStore.password }}
        - { name: NUODOCKER_KEYSTORE_PASSWORD,    value: {{ .Values.admin.tlsKeyStore.password | quote }} }
      {{- end }}
    {{- end }}
        ports:
        - containerPort: 48006
          protocol: TCP
        resources:
{{ toYaml .Values.database.sm.resources | trim | indent 10 }}
        volumeMounts:
        - name: log-volume
          mountPath: /var/log/nuodb
        - name: nuosm
          mountPath: /usr/local/bin/nuosm
          subPath: nuosm
        - name: nuobackup
          mountPath: /usr/local/bin/nuobackup
          subPath: nuobackup
        - name: readinessprobe
          mountPath: /usr/local/bin/readinessprobe
          subPath: readinessprobe
        - name: archive-volume
          mountPath: /var/opt/nuodb/archive
        - name: backup-volume
          mountPath: /var/opt/nuodb/backup
        {{- if .Values.admin.tlsCACert }}
        - name: tls-ca-cert
          mountPath: /etc/nuodb/keys/ca.cert
          subPath: {{ .Values.admin.tlsCACert.key }}
        {{- end }}
        {{- if .Values.admin.tlsClientPEM }}
        - name: tls-client-pem
          mountPath: /etc/nuodb/keys/nuocmd.pem
          subPath: {{ .Values.admin.tlsClientPEM.key }}
        {{- end }}
        {{- if .Values.admin.tlsKeyStore }}
        - name: tls-keystore
          mountPath: /etc/nuodb/keys/nuoadmin.p12
          subPath: {{ .Values.admin.tlsKeyStore.key }}
        {{- end }}
        readinessProbe:
          initialDelaySeconds: 30
          periodSeconds: 15
          exec:
            command: [ "readinessprobe" ]
          failureThreshold: 58
          # the SM becomes unready if it does not start within 15 minutes = 30s + 15s*58
          successThreshold: 2
          timeoutSeconds: {{ default 5 .Values.database.sm.readinessTimeoutSeconds }}
{{- include "nuodb.imagePullSecrets" . | indent 6 }}
      volumes:
      - name: log-volume
        emptyDir: {}
      - name: nuosm
        configMap:
          name: {{ template "database.fullname" . }}-nuosm
          defaultMode: 0777
      - name: nuobackup
        configMap:
          name: {{ template "database.fullname" . }}-nuobackup
          defaultMode: 0777
      - name: readinessprobe
        configMap:
          name: {{ template "database.fullname" . }}-readinessprobe
          defaultMode: 0777
      - name: archive-volume
        persistentVolumeClaim:
          claimName: {{ .Values.database.name }}-archive
      - name: backup-volume
        persistentVolumeClaim:
          claimName: {{ .Values.database.name }}-backup
      {{- if .Values.admin.tlsCACert }}
      - name: tls-ca-cert
        secret:
          secretName: {{ .Values.admin.tlsCACert.secret }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.admin.tlsClientPEM }}
      - name: tls-client-pem
        secret:
          secretName: {{ .Values.admin.tlsClientPEM.secret }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.admin.tlsKeyStore }}
      - name: tls-keystore
        secret:
          secretName: {{ .Values.admin.tlsKeyStore.secret }}
          defaultMode: 0440
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 15
{{- end }}
{{- end }}
