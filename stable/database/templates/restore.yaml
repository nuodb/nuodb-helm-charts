# This job is used to create the hotcopy backup volume PVCs based upon
# a snapshot handle.
{{- if hasKey .Values.database.sm.hotCopy.persistence "restore" }}
{{- if .Values.database.sm.hotCopy.persistence.restore }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name | quote }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        app: {{ template "database.fullname" . }}
        component: sm
        role: hotcopy
        group: nuodb
        database: {{ .Values.database.name }}
        domain: {{ .Values.admin.domain }}
        chart: {{ template "database.chart" . }}
        release: {{ .Release.Name | quote }}
    spec:
      restartPolicy: Never
      backoffLimit: 1
      serviceAccountName: "{{ .Values.backupmgr.restore.serviceAccount.name }}"
      containers:
      - name: main
        image: {{ template "aws.sidecar" . }}
        imagePullPolicy: {{ .Values.backupmgr.image.pullPolicy }}
        command:
        - create_pvcs
        - {{ .Values.database.sm.hotCopy.persistence.restore }}
        - {{ .Values.database.sm.hotCopy.replicas | quote }}
        - backup-volume-sm-{{ template "database.fullname" . }}-hotcopy
        env:
        - name: LABELSFILE
          value: /etc/pvcinfo/labels
        - name: STORAGECLASS
        {{- if .Values.database.sm.hotCopy.persistence.storageClass }}
        {{- if (eq "-" .Values.database.sm.hotCopy.persistence.storageClass) }}
          value: ""
        {{- else }}
          value: {{ .Values.database.sm.hotCopy.persistence.storageClass }}
        {{- end }}
        {{- end }}
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: podinfo
          mountPath: /etc/pvcinfo
      volumes:
      - name: podinfo
        downwardAPI:
          items:
          - path: "labels"
            fieldRef:
              fieldPath: metadata.labels
{{- end }}
{{- end }}