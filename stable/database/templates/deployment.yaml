{{- if eq (include "database.te.enablePod" .) "true" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    description: |-
      Database deployment resource for NuoDB Transaction Engines (TE).
    kubectl.kubernetes.io/default-container: engine
    kubectl.kubernetes.io/default-logs-container: engine
{{- include "database.loadBalancerConfig" . | indent 4 }}
{{- include "database.automaticProtocolUpgrade" . | indent 4 }}
    {{- if eq (include "defaulttrue" .Values.database.primaryRelease) "false" }}
    nuodb.com/database-secondary-release: "true"
    {{- end }}
  labels:
    {{- include "database.resourceLabels" . | nindent 4 }}
    component: te
  name: te-{{ template "database.fullname" . }}
spec:
  {{- if eq (include "database.te.setReplicas" .) "true" }}
  replicas: {{ include "database.te.replicas" . }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "database.selectorLabels" . | nindent 6 }}
      component: te
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
      {{- if .Values.database.configFiles }}
        {{- with .Values.database.configFiles }}
        checksum/config: {{ toYaml . | sha256sum }}
        {{- end }}
      {{- else }}
        checksum/config: "0"
      {{- end }}
      {{- include "database.tlsConfigAnnotations" . | nindent 8 }}
      {{- if .Values.database.podAnnotations }}
{{ toYaml .Values.database.podAnnotations | trim | indent 8 }}
      {{- end }}
      labels:
        {{- include "database.te.podLabels" . | nindent 8 }}
        component: te
    spec:
      serviceAccountName: {{ default "" .Values.nuodb.serviceAccount }}
      {{- if .Values.database.priorityClasses }}
      priorityClassName: {{ default "" .Values.database.priorityClasses.te }}
      {{- end }}
      {{- include "database.securityContext" . | indent 6 }}
      {{- include "database.podSpecExtras" . | trim | nindent 6 }}
      {{- if .Values.database.te.topologySpreadConstraints }}
      topologySpreadConstraints:
{{ tpl .Values.database.te.topologySpreadConstraints . | trim | indent 8 }}
      {{- end }}
      {{- with .Values.database.te.nodeSelector }}
      nodeSelector:
{{ toYaml . | trim | indent 8 }}
      {{- end }}
{{- if .Values.database.te.affinity }}
      affinity:
{{ tpl .Values.database.te.affinity . | trim | indent 8 }}
{{- end }}
      {{- if .Values.database.te.tolerations }}
      tolerations:
{{ toYaml .Values.database.te.tolerations | trim | indent 8 }}
      {{- end }}
      {{- if eq (include "defaulttrue" .Values.database.initContainers.runInitDisk) "true" }}
      initContainers:
      - name: init-disk
        image: {{ template "init.image" . }}
        imagePullPolicy: {{ default "" .Values.busybox.image.pullPolicy }}
        command:
          - sh
          - -c
          - find /mnt/* -maxdepth 1 -not \( -perm -0770 -user 1000 \) -exec chmod -R ug+rwx {} \; -exec chown -R 1000 {} \; -exec echo {} \;
        volumeMounts:
        {{- if eq (include "defaultfalse" .Values.database.te.logPersistence.enabled) "true" }}
        - name: log-volume
          mountPath: /mnt/logdir
        {{- end }}
        {{- if eq (include "database.enableEphemeralVolume" (list . .Values.database.te)) "true" }}
        - name: eph-volume
          mountPath: /mnt/eph
        {{- end }}
        {{- if eq (include "defaulttrue" .Values.database.initContainers.runInitDiskAsRoot) "true" }}
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        {{- end }}
      {{- end }}
      containers:
      - name: engine
        image: {{ template "nuodb.image" . }}
        imagePullPolicy: {{ .Values.nuodb.image.pullPolicy }}
        args:
          - "nuote"
          - "--database-created-timeout"
          - "300"
          - "--servers-ready-timeout"
          - "300"
          {{- if .Values.admin.affinityLabels}}
          - "--admin-affinity-label-keys"
          - "{{ .Values.admin.affinityLabels }}"
          {{- end }}
          - "--options"
          - "mem $(MEMORY_REQUEST) {{- range $opt, $val := .Values.database.te.engineOptions }} {{$opt}} {{$val}} {{- end}}"
          {{- include "database.teLabels" . | indent 10 }}
    {{- include "database.otherOptions" .Values.database.te.otherOptions | indent 10 }}
    {{- include "database.sc.containerSecurityContext" . | indent 8 }}
    {{- include "database.envFrom" . | indent 8 }}
        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_UID
            valueFrom:
              fieldRef:
                fieldPath: metadata.uid
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MEMORY_REQUEST
            valueFrom:
              resourceFieldRef:
                containerName: engine
                resource: requests.memory
          - { name: DB_NAME,             value: {{ ( include "database.dbName" . ) | quote }} }
          - { name: NUOCMD_API_SERVER,   value: "{{ template "admin.address" . }}:8888" }
          - { name: PEER_ADDRESS,        value: "{{ template "admin.address" . }}" }
          - { name: COMPONENT_NAME,      value: "te" }
          - { name: OVERWRITE_COPIES,    value: "{{ .Values.database.te.logPersistence.overwriteBackoff.copies | default "3" }}" }
          - { name: OVERWRITE_WINDOW,    value: "{{ .Values.database.te.logPersistence.overwriteBackoff.windowMinutes | default "120" }}" }
{{- include "database.env" . | indent 10 }}
      {{- if .Values.admin.tlsKeyStore }}
        {{- if .Values.admin.tlsKeyStore.password }}
          - { name: NUODOCKER_KEYSTORE_PASSWORD,    value: {{ .Values.admin.tlsKeyStore.password | quote }} }
        {{- else }}
          - name: NUODOCKER_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.admin.tlsKeyStore.secret }}
                key: {{ .Values.admin.tlsKeyStore.passwordKey | default "password" }}
        {{- end }}
      {{- end }}
        ports:
        - containerPort: 48006
          protocol: TCP
        resources:
{{ ( include "database.te.resources" . ) | trim | indent 10 }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        {{- with .Values.database.configFiles }}
        {{- range $key, $val := . }}
        - name: configurations
          mountPath: {{ $.Values.database.configFilesPath }}{{ $key }}
          subPath: {{ $key }}
        {{- end -}}
        {{- end }}
        - mountPath: /var/log/nuodb
          {{- if eq (include "defaultfalse" .Values.database.te.logPersistence.enabled) "true" }}
          name: log-volume
          {{- else }}
          name: eph-volume
          subPath: log
          {{- end }}
        {{- if eq (include "database.enableEphemeralVolume" (list . .Values.database.te)) "true" }}
        - name: eph-volume
          mountPath: /tmp
          subPath: tmp
        {{- end }}
        - name: nuote
          mountPath: /usr/local/bin/nuote
          subPath: nuote
        - name: readinessprobe
          mountPath: /usr/local/bin/readinessprobe
          subPath: readinessprobe
        {{- if .Values.admin.tlsClientPEM }}
        - name: tls
          mountPath: /etc/nuodb/keys
          readOnly: true
        {{- end }}
        readinessProbe:
          initialDelaySeconds: {{ default 5 .Values.database.te.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ default 5 .Values.database.te.readinessProbe.periodSeconds }}
          exec:
            command: [ "readinessprobe" ]
          failureThreshold: {{ default 3 .Values.database.te.readinessProbe.failureThreshold }}
          successThreshold: {{ default 1 .Values.database.te.readinessProbe.successThreshold }}
          {{- if .Values.database.te.readinessProbe.timeoutSeconds }}
          timeoutSeconds: {{ .Values.database.te.readinessProbe.timeoutSeconds }}
          {{- else }}
          timeoutSeconds: {{ default 5 .Values.database.te.readinessTimeoutSeconds }}
          {{- end }}
      {{- include "database.nuodb.sidecar.collector" (list . .Values.database.te) | nindent 6 }}
      {{- include "nuodb.imagePullSecrets" . | indent 6 }}
      {{- include "database.te.shareProcessNamespace" . | indent 6 }}
      volumes:
        {{- if .Values.database.configFiles }}
        - name: configurations
          configMap:
            name: {{ template "database.fullname" . }}-configuration
        {{- end }}
        {{- if eq (include "defaultfalse" .Values.database.te.logPersistence.enabled) "true" }}
        - name: log-volume
          persistentVolumeClaim:
            claimName: {{ template "database.fullname" . }}-log-te-volume
        {{- end }}
        {{- if eq (include "database.enableEphemeralVolume" (list . .Values.database.te)) "true" }}
        - name: eph-volume
          {{- include "database.ephemeralVolume" (list . .Values.database.te "te") | indent 10 }}
        {{- end }}
        - name: nuote
          configMap:
            name: {{ template "database.fullname" . }}-nuote
            defaultMode: 0777
        - name: readinessprobe
          configMap:
            name: {{ template "database.fullname" . }}-readinessprobe
            defaultMode: 0777
        {{- include "database.tlsVolume" . | nindent 8 }}
        {{- if eq (include "defaulttrue" .Values.nuocollector.watcher.enabled ) "false" }}
        {{- include "nuocollector.volume" . | nindent 8 }}
        {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 15
{{- end }}
