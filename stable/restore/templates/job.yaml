apiVersion: batch/v1
kind: Job
metadata:
  name: restore-{{ include "restore.target" . }}
  labels:
    group: nuodb
    subgroup: restore
    database: "{{ .Values.database.name }}"
spec:
  parallelism: 1
  completions: 1
  activeDeadlineSeconds: {{ .Values.restore.timeout }}
  template:
    spec:
{{- if .Values.restore.affinity }}
      affinity:
{{ tpl .Values.restore.affinity . | trim | indent 8 }}
{{- end }}
      containers:
      - name: restore
        image: {{ template "nuodb.image" . }}
        imagePullPolicy: {{ default "" .Values.nuodb.image.pullPolicy | quote }}

        ##
        # call the nuorestore script
        ##
        args:
        - "nuorestore"
        - "--db-name"
        - "{{ include "restore.target" . }}"
        - "--source"
        - "{{ include "restore.source" . }}"
        - "--auto"
        - "{{ default "true" .Values.restore.autoRestart }}"
    {{- include "restore.envFrom" . | indent 8 }}
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ include "restore.target" . }}.nuodb.com
              key: database-name
        - name: DATABASE_RESTORE_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.name }}.nuodb.com
              key: database-restore-credentials
        - { name: NUOCMD_API_SERVER,   value: "{{ template "admin.address" . }}:8888"}
        - { name: NUODB_RESTORE_URL,   value: "{{ include "restore.source" . }}" }
        - { name: NUODB_RESTORE_CREDENTIALS, value: "{{ .Values.restore.credentials }}" }
        volumeMounts:
        - name: log-volume
          mountPath: /var/log/nuodb
        - name: nuorestore
          mountPath: /usr/local/bin/nuorestore
          subPath: nuorestore
        {{- if .Values.admin.tlsCACert }}
        - name: tls-ca-cert
          mountPath: /etc/nuodb/keys/ca.cert
          subPath: {{ .Values.admin.tlsCACert.key }}
        {{- end }}
        {{- if .Values.admin.tlsClientPEM }}
        - name: tls-client-pem
          mountPath: /etc/nuodb/keys/nuocmd.pem
          subPath: {{ .Values.admin.tlsClientPEM.key }}
        {{- end }}
{{- include "nuodb.imagePullSecrets" . | indent 6 }}
      volumes:
      - name: log-volume
        emptyDir: {}
      - name: nuorestore
        configMap:
          name: {{ template "database.fullname" . }}-nuorestore
          defaultMode: 0777
      {{- if .Values.admin.tlsCACert }}
      - name: tls-ca-cert
        secret:
          secretName: {{ .Values.admin.tlsCACert.secret }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.admin.tlsClientPEM }}
      - name: tls-client-pem
        secret:
          secretName: {{ .Values.admin.tlsClientPEM.secret }}
          defaultMode: 0440
      {{- end }}
      restartPolicy: Never
