## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName

cloud:
  # supported: amazon, azure, google
  provider:
  # zones:
  #   - us-east-2a
  #   - us-east-2b
  #   - us-east-2c
  
  cluster:
    # cluster name is used to make resources unique in multi-cluster configurations.
    # If the NuoDB domain spans 2 or more physical clusters, then each cluster must have a unique cluster.name.
    # The default is fine for single-cluster domains.
    name: cluster0

busybox:
  image:
    registry: docker.io
    repository: busybox
    tag: latest
    pullPolicy: IfNotPresent

nuodb:
  image:
    registry: docker.io
    repository: nuodb/nuodb-ce
    tag: 4.0.8
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    ##
    # pullSecrets:
    # - myRegistryKeySecretName
    ## Specify a imagePullPolicy
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##

    # the prefix for the shared restore-request value - default value is always valid
    requestPrefix: ""

    # the prefix for the shared latest backup value - default value is always valid
    latestPrefix: ""

admin:
  # nameOverride: east
  # fullnameOverride: admin-east
  # namespace: nuodb
  domain: nuodb
  # tlsCACert:
  #   secret: nuodb-ca-cert
  #   key: ca.cert
  # tlsClientPEM:
  #   secret: nuodb-client-pem
  #   key: client.pem

restore:

  ## Provide a name in place of the chart name for `app:` labels
  ##
  #nameOverride: ""

  ## Provide a name to substitute for the full names of resources
  ##
  #fullnameOverride: ""

  # restore type: [ database | archive ]
  #
  # A database restore restores ALL archives of the database - ie restarts the database at a previous state
  # An archive restore restores/repairs a single archive in a RUNNING database
  type: "database"

  # name of the existing database being restored 
  target: "demo"

  # The source can be one of:
  # * the name of a backupset on a hotcopy-SM's backup disk;
  # * the metaname ':latest'
  # * the URL of a downloadable TAR file of a hotcopy backupset
  # * stream:URL of a downloadable TAR file of a exact copy of a NuoDB archive
  #
  # When performing restore in multi-cluster deployment, the :latest tag can
  # point to different backupsets in each cluster. Single backupset name should
  # be used when requesting database restore. It's recommended to restore NuoDB
  # database by selecting archiveIds in one of the clusters only.
  source: ""

  # credentials for the specified target - if different to the database.autoRestore.credentials
  credentials: ""

  # The number of leading path elements removed by the `tar` command during
  # archive extraction
  stripLevels: "1"

  # autoRestart
  # if set to "true", running the restore chart causes the database to be restarted automatically
  autoRestart: "true"

  # Complete set of archiveIds that should be restored which then defines the
  # new state of the database upon restore. Either `labels` or `archiveIds`
  # should be specified. The setting works with NuoDB 4.2+.
  archiveIds: []

  # Process labels used to filter the complete set of archiveIds that should be
  # restored which then defines the new state of the database upon restore. By
  # default all HC SMs in the specified cluster will be filtered. Either
  # `labels` or `archiveIds` should be specified. The setting works with NuoDB
  # 4.2+.
  labels: {}

  # If set to "true", archives restore should be done manually once the SM pod
  # is started. The engine startup will block waiting for the user to complete
  # the archives restore. Otherwise the archives restore will be  performed by
  # init container in the SM pod. The setting works with NuoDB 4.2+.
  manual: "false"

  envFrom:
    configMapRef: []
    
  affinity: {}
  
  timeout: 1800

