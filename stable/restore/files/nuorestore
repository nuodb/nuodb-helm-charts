#!/bin/bash

# (C) Copyright NuoDB, Inc. 2019-2021  All Rights Reserved
# This file is licensed under the BSD 3-Clause License.
# See https://github.com/nuodb/nuodb-helm-charts/blob/master/LICENSE
#
# simple script to perform a NuoDB restore.
# Sets a flag to tell newly-starting SM(s) to perform the restore; then optionally causes the SM(s) to restart

# args are:
#   --type      - retore type: ( database | archive )
#   --db-name   - database name to perform the restore operation on
#   --source    - source to restore from - can be a backupset or a URL
#   --auto      - automatically start the restore operation ( true | false )
#   --labels         - additional arbitrary labels to select the SMs for restore
#   --archive-ids    - set of archive ids which will be restored
#   --manual         - request manual archives restore ( true | false )

[ "$NUODB_DEBUG" = "verbose" ] && set -X

: ${NUODB_BACKUP_KEY:=/nuodb/nuobackup}
: ${NUODB_RESTORE_REQUEST_PREFIX:=/nuodb/nuosm}

LOGFILE=${NUODB_LOGDIR:=/var/log/nuodb}/nuorestore.log

#=======================================
# function - log messages
#
function log() {
  local message="$@"
  if [ -n "$message" ]; then
    echo "$( date "+%Y-%m-%dT%H:%M:%S.%3N%z" ) $message" | tee -a $LOGFILE
  fi
}

#=======================================
# function - trace workflow
#
function trace() {
  wotIdid="$@"
  [ -n "$1" -a -n "$NUODB_DEBUG" ] && log "trace: $wotIdid"
}

#=======================================
# function - wrap a log file around so it doesn't grow infinitely
#
function wrapLogfile() {
  logsize=$( du -sb $LOGFILE | grep -o '^ *[0-9]\+' )
  maxlog=5000000
  log "logsize=$logsize"
  if [ ${logsize:=0} -gt $maxlog ]; then
    lines=$(wc -l $LOGFILE)
    tail -n $(( lines / 2 )) $LOGFILE > ${LOGFILE}-new
    rm -rf $LOGFILE
    mv $LOGFILE-new $LOGFILE
    log "(nuorestore) log file wrapped around"
  fi
}

#=======================================
# function - report an error and exit
#
function die() {
  local retval=$1
  shift
  error="$*"
  [ -n "$wotIdid" ] && error="Error while ${wotIdid}: ${error}"
  log "$error"
  exit "$retval"
}

# function - NuoDB 4.2+ supports new way of requesting database in-place
# restore build into nuodocker.
#
function isRestoreRequestSupported() {
   nuodocker request restore -h > /dev/null 2>&1
   if [ $? -eq 2 ]; then
      return 1
   else
      return 0
   fi
}

#=======================================
# function - checks if URL is provided in a form of scheme:[//authority]path
#
function isUrl() {
  local url="$1"
  echo "$url" | grep -q '^[a-z]\+:/[^ ]\+'
  return $?
}

restore_type="database"
db_name=$DB_NAME
restore_source=":latest"
auto="false"
labels=""
archive_ids=""
backup_group=""
backup_index=""

restore_credentials=$NUODB_RESTORE_CREDENTIALS
[ -z "$restore_credentials" ] && restore_credentials=${DATABASE_RESTORE_CREDENTIALS:=:}
strip_levels="$NUODB_RESTORE_REQUEST_STRIP_LEVELS"

while [ $# -gt 0 ];
do
    opt="$1";
    shift;
    case "$opt" in
        "--" ) break 2;;
        "--type" )
           restore_type="$1"; shift;;
        "--type="* )
           restore_type="${opt#*=}";;
        "--db-name" )
           db_name="$1"; shift;;
        "--db-name="* )
           db_name="${opt#*=}";;
        "--source" )
           restore_source="$1"; shift;;
        "--source="* )
           restore_source="${opt#*=}";;
        "--auto" )
           auto="$1"; shift;;
        "--auto="* )
           auto="${opt#*=}";;
        "--labels" )
           labels="$1"; shift;;
        "--labels="* )
           labels="${opt#*=}";;
        "--archive-ids" )
           archive_ids="$1"; shift;;
        "--archive-ids="* )
           archive_ids="${opt#*=}";;
        "--manual" )
           manual="$1"; shift;;
        "--manual="* )
           manual="${opt#*=}";;
        *) echo >&2 "Invalid nuorestore option: $opt ($@)"; exit 1;;
   esac
done

restore_type=$(echo $restore_type | tr '[:upper:]' '[:lower:]')
auto=$(echo $auto | tr '[:upper:]' '[:lower:]')

if ! isUrl "$restore_source"; then
   # Resolve special restore sources - ":latest", "<backup_group>:latest" or
   # "<backup_group>:<index>"; fail the database restore early if we are not
   # able to do that
   if echo "$restore_source" | grep -Eq ":latest$"; then
      backup_group="${restore_source%:latest}"
      if [ -z "$backup_group" ]; then
         backup_group=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/latest")
      fi
      backup_index=$(nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/$backup_group/latest")
      if [ -z "$backup_index" ]; then
         die 1 "Unable to find the latest backup for backup group '${backup_group}'"
      fi
      backup_set=$( nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/$backup_group/$backup_index")
      if [ -n "$backup_set" ]; then
         restore_source="$backup_set"
      else
         die 1 "Unable to find a valid backup set for restore source '${restore_source}'"
      fi
   elif echo "$restore_source" | grep -Eq ":[0-9]+$"; then
      backup_group="${restore_source%:*}"
      backup_index="${restore_source##*:}"
      backup_set=$( nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/$backup_group/$backup_index")
      if [ -n "$backup_set" ]; then
         restore_source="$backup_set"
      else
         die 1 "Unable to find a valid backup set for restore source '${restore_source}'"
      fi
   fi
fi

if isRestoreRequestSupported; then
   # Use nuodocker to place restore request
   additional_args=""
   restore_source_encoded="$(printf "%s" "${restore_source}" | base64 -w 0)"
   user_data="restore_source_encoded='${restore_source_encoded}'"
   if [ -z "$labels" ] && [ -z "$archive_ids" ]; then
      if [ -n "$backup_group" ] && [ -n "$backup_index" ]; then
         # no archive selection was provided by the user but a special restore
         # source has been used; fetch the pods participated in the backup and
         # select them for restore
         pods=$( nuocmd get value --key "$NUODB_BACKUP_KEY/$db_name/$backup_group/$backup_index/pods")
         if [ -n "$pods" ]; then
            for pod in $pods; do
               labels="${labels} pod-name ${pod}"
            done
         else
            log "Unable to automatically determine the SMs to be restored with source ${restore_source}"
         fi
      fi
      if [ -z "$labels" ] && ! isUrl "$restore_source"; then
         die 1 "Please select the SMs to be restored using either --labels or --archive-ids"
      fi
   fi
   [ -n "$labels" ] && additional_args="${additional_args} --labels ${labels}"
   [ -n "$archive_ids" ] && additional_args="${additional_args} --archive-ids ${archive_ids}"
   [ "$manual" == "true" ] && additional_args="${additional_args} --manual"
   if [ -n "$restore_credentials" ]; then
      restore_credentials_encoded="$(printf "%s" "${restore_credentials}" | base64 -w 0)"
      user_data="${user_data};restore_credentials_encoded='${restore_credentials_encoded}'"
   fi
   if [ -n "$strip_levels" ]; then
      user_data="${user_data};strip_levels='${strip_levels}'"
   fi

   log "restore_type=${restore_type}; restore_source=${restore_source}; arguments=${additional_args}"
   nuodocker request restore \
      --db-name "$db_name" \
      --type "$restore_type" \
      --user-data "${user_data}" $additional_args
   rc=$?
   if [ $rc -ne 0 ]; then
      die $rc "Restore request failed"
   fi

   if [ "$auto" = "true" ]; then
      if [ "$restore_type" = "database" ]; then
         log "restore.autoRestart=true - initiating full database restart for database $db_name"
         nuocmd shutdown database --db-name "$db_name"
      else
         for archive_id in $(nuodocker get restore-requests --db-name "$db_name" | grep '[0-9]\+ automatic' | awk '{print $1}'); do
            start_id=$(nuocmd show domain \
               --process-format "###{archive_id::-1} {start_id}" | grep "###${archive_id} " | awk '{print $2}')
            if [ -n "$start_id" ]; then
               log "restore.autoRestart=true - initiating process startId=${start_id} restart"
               nuocmd shutdown process --start-id "$start_id"
            fi
         done
      fi
   fi

else
   # Legacy restore request code goes here
   # set the persistent flag for the backup
   log "restore_type=$restore_type; writing $restore_source to $NUODB_RESTORE_REQUEST_PREFIX/$db_name/restore"

   nuocmd set value --key $NUODB_RESTORE_REQUEST_PREFIX/$db_name/restore \
      --value $restore_source \
      --unconditional

   if [ -n "$restore_credentials" ]; then
      nuocmd set value --key $NUODB_RESTORE_REQUEST_PREFIX/$db_name/restore/credentials \
         --value $restore_credentials \
         --unconditional
   fi

   if [ -n "$strip_levels" ]; then
      nuocmd set value --key "$NUODB_RESTORE_REQUEST_PREFIX/$db_name/restore/strip-levels" \
         --value "$strip_levels" \
         --unconditional
   fi

   log "Setting flag for database $db_name to restore from $restore_source on next database/SM startup"

   if [ "$restore_type" = "database" ]; then
      # optionally do automatic initiation of the restore
      if [ "$auto" = "true" ]; then
         log "restore.autoRestart=true - initiating full database restart for database $db_name"

         nuocmd shutdown database --db-name $db_name
      else
         log "restore.autoRestart=false. Restore will be performed when the database - or SM(s) - are manually restarted - over to you..."
      fi
   else
      log "Flag set for $restore_type restore. Restore will be performed when the chosen SM is manually restarted - over to you..."
   fi
fi

log "Restore job completed"
