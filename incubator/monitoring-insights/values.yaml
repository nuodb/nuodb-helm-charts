## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName

cloud:
  # supported: amazon, azure, google
  provider:
  # zones:
  #   - us-east-2a
  #   - us-east-2b
  #   - us-east-2c

nuodb:
  image:
    registry: docker.io
    repository: nuodb/nuodb-ce
    tag: 4.0.5
    pullPolicy: Always
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    ##
    # pullSecrets:
    # - myRegistryKeySecretName
    ## Specify a imagePullPolicy
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##

admin:
  # namespace: nuodb
  domain: nuodb
  # tlsCACert:
  #   secret: nuodb-ca-cert
  #   key: ca.cert
  # tlsClientPEM:
  #   secret: nuodb-client-pem
  #   key: client.pem

insights:
  # nameOverride:
  # fullnameOverride:  

  # Use to control Insights Opt In.  Insights provides database monitoring.
  # Set to "true" to activate or "false" to deactivate
  enabled: true

  ## Use a securityContext to specify additional capabilities
  # For example, if the container needs to configure network setting, then add "NET_ADMIN"
  # Ex: capabilities: [ "NET_ADMIN" ]
  ##
  securityContext:
    capabilities: []

  ## Import Environment Variables from one or more configMaps
  # Ex: envFrom: [ configMapRef: { name: myConfigMap }, configMapRef: { name: myOtherConfigMap } ]
  ##
  envFrom: []

  # affinity: {}
  # nodeSelector: {}
  # tolerations: []

openshift:
  # change this to true if you want to deploy using OpenShift proprietary features
  enabled: false
  # if openshift is enabled, then also permit routes by default
  enableRoutes: true
