# Golang CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1
parameters:
  run_build:
    default: true
    type: boolean
  # it's not possible to trigger a single job using API 2.1 so use pipeline
  # parameters and conditional workflow -
  # https://discuss.circleci.com/t/how-to-trigger-the-single-job-in-circleci-2-1/27238
  # https://support.circleci.com/hc/en-us/articles/360050351292-How-to-trigger-a-workflow-via-CircleCI-API-v2
  run_single_test:
    default: ''
    type: string
  run_single_test_suite:
    default: './test/minikube/*'
    type: string
  run_single_test_repeat:
    default: 0
    type: integer
  run_single_test_requires_minikube:
    default: true
    type: boolean
  run_single_test_requires_aks:
    default: false
    type: boolean
  run_single_test_timeout:
    default: '120m'
    type: string
orbs:
  azure-cli: circleci/azure-cli@1.1.0
jobs:
  go-test:
    parameters:
      test-suite:
        description: |
          Terratest suites to be included in the path.
        type: string
      test-case:
        default: ''
        description: |
          Run only those tests matching the regular expression.
        type: string
      tag:
        default: ''
        description: |
          Go test tags to be included.
        type: string
      timeout:
        default: '60m'
        description: |
          Go test timeout.
        type: string
      repeat:
        default: 0
        description: |
          Run each test n times or until failure (default: does not repeat).
        type: integer
      requires-minikube:
        default: false
        description: |
          The test suite requires that minikube cluster to be available.
        type: boolean
      requires-minishift:
        default: false
        description: |
          The test suite requires that minishift cluster to be available.
        type: boolean
      requires-aks:
        default: false
        description: |
          The test suite requires that Azure AKS cluster to be available.
        type: boolean
      resource-class:
        default: 'medium'
        description: |
          CircleCI instance size
        type: string

    machine:
      image: ubuntu-1604:202007-01

    resource_class: <<parameters.resource-class>>

    environment:
      HELM_VERSION: "v3.6.3"
      KUBERNETES_VERSION: "1.21.3"
      OPENSHIFT_VERSION: "3.11.0"
      MINIKUBE_VERSION: "1.22.0"
      MINISHIFT_VERSION: "1.34.2"
      GOTESTSUM_VERSION: "1.7.0"
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      CHANGE_MINIKUBE_NONE_USER: true
      AZURE_AKS_RESOURCE_GROUP: "orca-ying-yang"
      AZURE_AKS_CLUSTERS: "yin yang"
      TEST_RESULTS: /tmp/test-results # path to where test results will be saved
    
    steps:
      - checkout

      - when:
          condition: <<parameters.requires-aks>>
          steps:
            - azure-cli/install # install Azure CLI is faster if done by CircleCI orb
            - azure-cli/login-with-service-principal # login using service principal

      - run:
          name: Install Dependencies
          command: |
            export REQUIRES_MINIKUBE="<< parameters.requires-minikube >>"
            export REQUIRES_MINISHIFT="<< parameters.requires-minishift >>"
            export REQUIRES_AKS="<< parameters.requires-aks >>"
            export KUBECONFIG="$HOME/.kube/config"
            export MINIKUBE_HOME="$HOME"
            chmod a+x scripts/ci/*.sh
            scripts/ci/install_deps.sh

      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - go-mod-v4-custom-<< parameters.test-suite >>-<< parameters.tag >>-{{ checksum "go.sum" }}
      
      - run:
          name: Run the tests
          command: |
            TEST_SUITE="<< parameters.test-suite >>"
            TEST_CASE="<< parameters.test-case >>"
            TEST_TAG="<< parameters.tag >>"
            TEST_TIMEOUT="<< parameters.timeout >>"
            TEST_REPEAT="<< parameters.repeat >>"
            set -- "$@" ${TEST_SUITE}
            if [ -n "${TEST_TAG}" ]; then
              set -- "$@" -tags=${TEST_TAG}
            fi
            if [ -n "${TEST_CASE}" ]; then
              set -- "$@" -run="${TEST_CASE}"
            fi
            if [ "${TEST_REPEAT}" -gt "0" ]; then
              set -- "$@" -count=${TEST_REPEAT} -failfast
            fi
            mkdir -p $TEST_RESULTS # create the test results directory
            go clean -testcache
            echo "Running with Go arguments: $@"
            gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report-${CIRCLE_BUILD_NUM}.xml --format testname -- -timeout ${TEST_TIMEOUT} "$@" 
          no_output_timeout: 60m

      - save_cache: # store unique cache for each test suite and tag combination
          key: go-mod-v4-custom-<< parameters.test-suite >>-<< parameters.tag >>-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/.go_workspace/pkg/mod"

      - store_test_results: # upload test results for display in Test Summary
          path: /tmp/test-results

      - store_artifacts:
          path: /tmp/test-results

      - store_artifacts:
          path: ./results/

workflows:
  version: 2
  build:
    when: << pipeline.parameters.run_build >>
    # jobs are run in parallel by default, so any dependencies must be explicitly requires
    jobs:
      - go-test:
          name: "Integration tests"
          test-suite: "./test/integration"
      - go-test:
          name: "Short tests"
          test-suite: "./test/minikube"
          tag: "short"
          requires-minikube: true
      - go-test:
          name: "Long tests"
          test-suite: "./test/minikube"
          tag: "long"
          requires-minikube: true
          timeout: "90m"
      - go-test:
          name: "Diagnostics tests"
          test-suite: "./test/minikube"
          tag: "diagnostics"
          requires-minikube: true
      - go-test:
          name: "Upgrade tests"
          test-suite: "./test/minikube"
          tag: "upgrade"
          requires-minikube: true
      - go-test:
          name: "Large Instance Tests"
          test-suite: "./test/minikube"
          tag: "large"
          requires-minikube: true
          resource-class: large
      - go-test:
          name: "Multi-cluster tests"
          test-suite: "./test/multicluster"
          requires-aks: true
  # Executes single Go test (disabled by default)
  single-test:
    when: << pipeline.parameters.run_single_test >>
    jobs:
      - go-test:
          name: "Test: << pipeline.parameters.run_single_test >>"
          test-case: << pipeline.parameters.run_single_test >>
          test-suite: << pipeline.parameters.run_single_test_suite >>
          timeout: << pipeline.parameters.run_single_test_timeout >>
          repeat: << pipeline.parameters.run_single_test_repeat >>
          requires-minikube: << pipeline.parameters.run_single_test_requires_minikube >>
          requires-aks: << pipeline.parameters.run_single_test_requires_aks >>
